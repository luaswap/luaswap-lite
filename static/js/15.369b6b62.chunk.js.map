{"version":3,"sources":["src/components/AmountMeta.tsx","src/hooks/useMasterChef.tsx","src/hooks/useFarmingState.tsx","src/screens/HarvestScreen.tsx"],"names":["AmountMeta","props","t","useTranslation","useColors","textDark","textLight","placeholder","style","fontSize","IS_DESKTOP","marginBottom","Spacing","normal","color","disabled","amount","suffix","useMasterChef","deposit","useCallback","lpTokenId","signer","a","async","masterChef","getContract","MASTER_CHEF","estimateGas","gasLimit","mul","div","tx","logTransaction","toString","withdraw","useFarmingState","myPools","state","useLPTokensState","useContext","EthersContext","getTokenAllowance","useState","loading","setLoading","depositing","setDepositing","withdrawing","setWithdrawing","useEffect","setFromAmount","setToAmount","selectedLPToken","useAsyncEffect","setSelectedLPTokenAllowed","minAllowance","ethers","BigNumber","from","pow","sub","address","allowance","gte","pair","totalSupply","amountDeposited","lpToken","convertToken","tokenA","tokenB","TokenAmount","lpTokenAmount","tokenAAmount","involvesToken","getLiquidityValue","toFixed","tokenBAmount","onDeposit","id","parseBalance","decimals","wait","setSelectedLPToken","undefined","updateLastTimeRefreshed","onWithdraw","Harvest","chainId","marginTop","large","title","emptyText","Item","TokenItem","Withdraw","WithdrawInfo","formatBalance","token","onPress","onSelectToken","selected","containerStyle","ITEM_SEPARATOR_HEIGHT","alignItems","small","replaceWETH","marginLeft","medium","caption","tiny","symbol","flex","textAlign","marginRight","text","balance","onAmountChanged","setAmount","autoFocus","total","sushi","lte","pendingSushi","label1","label2","isEmptyValue","label","fromAmount","toAmount","WithdrawControls","error","setError","isZero","WithdrawButton","onError","gt","message","code","catch","HarvestScreen","light","Platform","OS"],"mappings":"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","file":"static/js/15.369b6b62.chunk.js","sourcesContent":["import React, { FC } from \"react\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport Text from \"./Text\";\n\nexport interface AmountMetaProps {\n    amount?: string;\n    suffix?: string;\n    disabled?: boolean;\n}\n\nconst AmountMeta: FC<AmountMetaProps> = props => {\n    const t = useTranslation();\n    const { textDark, textLight, placeholder } = useColors();\n    return (\n        <Text\n            style={{\n                fontSize: IS_DESKTOP ? 28 : 20,\n                marginBottom: Spacing.normal,\n                color: props.disabled ? placeholder : props.amount ? textDark : textLight\n            }}>\n            {props.disabled ? t(\"n/a\") : props.amount ? props.amount + \" \" + (props.suffix || \"\") : t(\"fetching\")}\n        </Text>\n    );\n};\n\nexport default AmountMeta;\n","import { useCallback } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport { MASTER_CHEF } from \"../constants/contracts\";\nimport { getContract } from \"../utils\";\nimport { logTransaction } from \"../utils/analytics-utils\";\n\nconst useMasterChef = () => {\n    const deposit = useCallback(async (lpTokenId: number, amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const masterChef = getContract(\"MasterChef\", MASTER_CHEF, signer);\n        const gasLimit = await masterChef.estimateGas.deposit(lpTokenId, amount);\n        const tx = await masterChef.deposit(lpTokenId, amount, {\n            gasLimit: gasLimit.mul(120).div(100)\n        });\n        return logTransaction(tx, \"MasterChef.deposit()\", lpTokenId, amount.toString());\n    }, []);\n\n    const withdraw = useCallback(async (lpTokenId: number, amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const masterChef = getContract(\"MasterChef\", MASTER_CHEF, signer);\n        const gasLimit = await masterChef.estimateGas.withdraw(lpTokenId, amount);\n        const tx = await masterChef.withdraw(lpTokenId, amount, {\n            gasLimit: gasLimit.mul(120).div(100)\n        });\n        return logTransaction(tx, \"MasterChef.withdraw()\", lpTokenId, amount.toString());\n    }, []);\n\n    return {\n        deposit,\n        withdraw\n    };\n};\n\nexport default useMasterChef;\n","import { useCallback, useContext, useEffect, useState } from \"react\";\n\nimport { TokenAmount } from \"@luaswap/sdk\";\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { MASTER_CHEF } from \"../constants/contracts\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport { convertToken, parseBalance } from \"../utils\";\nimport useLPTokensState, { LPTokensState } from \"./useLPTokensState\";\nimport useMasterChef from \"./useMasterChef\";\n\nexport interface FarmingState extends LPTokensState {\n    onDeposit: () => Promise<void>;\n    depositing: boolean;\n    onWithdraw: () => Promise<void>;\n    withdrawing: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useFarmingState: (myPools: boolean) => FarmingState = myPools => {\n    const state = useLPTokensState(myPools ? \"my-pools\" : \"pools\");\n    const { signer, getTokenAllowance } = useContext(EthersContext);\n    const { deposit, withdraw } = useMasterChef();\n    const [loading, setLoading] = useState(false);\n    const [depositing, setDepositing] = useState(false);\n    const [withdrawing, setWithdrawing] = useState(false);\n\n    useEffect(() => {\n        setLoading(false);\n        setDepositing(false);\n        setWithdrawing(false);\n        state.setFromAmount(\"\");\n        state.setToAmount(\"\");\n    }, [state.selectedLPToken]);\n\n    useAsyncEffect(async () => {\n        if (signer && state.selectedLPToken) {\n            setLoading(true);\n            state.setSelectedLPTokenAllowed(false);\n            try {\n                const minAllowance = ethers.BigNumber.from(2)\n                    .pow(96)\n                    .sub(1);\n                const allowance = await getTokenAllowance(state.selectedLPToken.address, MASTER_CHEF);\n                state.setSelectedLPTokenAllowed(ethers.BigNumber.from(allowance).gte(minAllowance));\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [signer, state.selectedLPToken]);\n\n    useAsyncEffect(() => {\n        if (\n            state.pair &&\n            state.selectedLPToken &&\n            state.selectedLPToken.totalSupply &&\n            state.selectedLPToken.amountDeposited\n        ) {\n            const lpToken = convertToken(state.selectedLPToken);\n            const tokenA = convertToken(state.selectedLPToken.tokenA);\n            const tokenB = convertToken(state.selectedLPToken.tokenB);\n            const totalSupply = new TokenAmount(lpToken, state.selectedLPToken.totalSupply.toString());\n            const lpTokenAmount = new TokenAmount(lpToken, state.selectedLPToken.amountDeposited.toString());\n            const tokenAAmount = state.pair.involvesToken(tokenA)\n                ? state.pair.getLiquidityValue(tokenA, totalSupply, lpTokenAmount)\n                : null;\n            state.setFromAmount(tokenAAmount?.toFixed() || \"\");\n            const tokenBAmount = state.pair.involvesToken(tokenA)\n                ? state.pair.getLiquidityValue(tokenB, totalSupply, lpTokenAmount)\n                : null;\n            state.setToAmount(tokenBAmount?.toFixed() || \"\");\n        }\n    }, [state.pair, state.selectedLPToken]);\n\n    const onDeposit = useCallback(async () => {\n        if (state.selectedLPToken?.id && state.amount && signer) {\n            setDepositing(true);\n            try {\n                const amount = parseBalance(state.amount, state.selectedLPToken.decimals);\n                const tx = await deposit(state.selectedLPToken.id, amount, signer);\n                await tx.wait();\n                state.setSelectedLPToken(undefined);\n                await state.updateLastTimeRefreshed();\n            } finally {\n                setDepositing(false);\n            }\n        }\n    }, [state.selectedLPToken, state.amount, signer]);\n\n    const onWithdraw = useCallback(async () => {\n        if (state.selectedLPToken?.id && state.amount && signer) {\n            setWithdrawing(true);\n            try {\n                const amount = parseBalance(state.amount, state.selectedLPToken.decimals);\n                const tx = await withdraw(state.selectedLPToken.id, amount, signer);\n                await tx.wait();\n                state.setSelectedLPToken(undefined);\n                await state.updateLastTimeRefreshed();\n            } finally {\n                setWithdrawing(false);\n            }\n        }\n    }, [state.selectedLPToken, state.amount, signer]);\n\n    return {\n        ...state,\n        loading: state.loading || loading,\n        onDeposit,\n        depositing,\n        onWithdraw,\n        withdrawing\n    };\n};\n\nexport default useFarmingState;\n","import React, { FC, useCallback, useContext, useState } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport useAsyncEffect from \"use-async-effect\";\nimport AmountMeta from \"../components/AmountMeta\";\nimport BackgroundImage from \"../components/BackgroundImage\";\nimport Border from \"../components/Border\";\nimport Button from \"../components/Button\";\nimport ChangeNetwork from \"../components/ChangeNetwork\";\nimport CloseIcon from \"../components/CloseIcon\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport FlexView from \"../components/FlexView\";\nimport Heading from \"../components/Heading\";\nimport InfoBox from \"../components/InfoBox\";\nimport { ITEM_SEPARATOR_HEIGHT } from \"../components/ItemSeparator\";\nimport LPTokenSelect, { LPTokenItemProps } from \"../components/LPTokenSelect\";\nimport Meta from \"../components/Meta\";\nimport Selectable from \"../components/Selectable\";\nimport SelectIcon from \"../components/SelectIcon\";\nimport Text from \"../components/Text\";\nimport Title from \"../components/Title\";\nimport TokenInput from \"../components/TokenInput\";\nimport TokenLogo from \"../components/TokenLogo\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport { FarmingSubMenu } from \"../components/web/WebSubMenu\";\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useFarmingState, { FarmingState } from \"../hooks/useFarmingState\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport Token from \"../types/Token\";\nimport { formatBalance, isEmptyValue, parseBalance } from \"../utils\";\nimport Screen from \"./Screen\";\n\nconst HarvestScreen = () => {\n    const t = useTranslation();\n    return (\n        <Screen>\n            <Container>\n                <BackgroundImage />\n                <Content>\n                    <Title text={t(\"harvest-sushi\")} />\n                    <Text light={true}>{t(\"harvest-sushi-desc\")}</Text>\n                    <Harvest />\n                </Content>\n                {Platform.OS === \"web\" && <WebFooter />}\n            </Container>\n            <FarmingSubMenu />\n        </Screen>\n    );\n};\n\nconst Harvest = () => {\n    const { chainId } = useContext(EthersContext);\n    if (chainId !== 88) return <ChangeNetwork />;\n    const t = useTranslation();\n    const state = useFarmingState(true);\n    return (\n        <View style={{ marginTop: Spacing.large }}>\n            <LPTokenSelect\n                state={state}\n                title={\"My Farms\"}\n                emptyText={t(\"you-dont-have-lp-tokens-deposited\")}\n                Item={TokenItem}\n            />\n            <Border />\n            <Withdraw state={state} />\n            <WithdrawInfo state={state} />\n        </View>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst TokenItem: FC<LPTokenItemProps> = props => {\n    const amount = formatBalance(props.token?.amountDeposited || 0, props.token.decimals, 8);\n    const onPress = useCallback(() => {\n        props.onSelectToken(props.token);\n    }, [props.onSelectToken, props.token]);\n    return (\n        <Selectable\n            selected={props.selected}\n            onPress={onPress}\n            containerStyle={{ marginBottom: ITEM_SEPARATOR_HEIGHT }}>\n            <FlexView style={{ alignItems: \"center\" }}>\n                <TokenLogo token={props.token.tokenA} small={true} replaceWETH={true} />\n                <TokenLogo token={props.token.tokenB} small={true} replaceWETH={true} style={{ marginLeft: 4 }} />\n                <Text medium={true} caption={true} style={{ marginLeft: Spacing.tiny }}>\n                    {props.token.tokenA.symbol}-{props.token.tokenB.symbol}\n                </Text>\n                <Text caption={IS_DESKTOP} medium={true} style={{ flex: 1, textAlign: \"right\", marginRight: 4 }}>\n                    {amount}\n                </Text>\n                {props.selected ? <CloseIcon /> : <SelectIcon />}\n            </FlexView>\n        </Selectable>\n    );\n};\n\nconst Withdraw = ({ state }: { state: FarmingState }) => {\n    const t = useTranslation();\n    if (!state.selectedLPToken) {\n        return <Heading text={t(\"amount\")} disabled={true} />;\n    }\n    // This enables MAX button\n    const token = {\n        ...state.selectedLPToken,\n        balance: state.selectedLPToken.amountDeposited\n    } as Token;\n    return (\n        <View>\n            <Heading text={state.selectedLPToken.symbol + \" \" + t(\"amount\")} />\n            <TokenInput token={token} amount={state.amount} onAmountChanged={state.setAmount} autoFocus={IS_DESKTOP} />\n        </View>\n    );\n};\n\nconst WithdrawInfo = ({ state }: { state: FarmingState }) => {\n    const t = useTranslation();\n    const amount = parseBalance(state.amount);\n    const total = state.selectedLPToken?.amountDeposited;\n    const sushi = total && amount.lte(total) ? state.selectedLPToken!.pendingSushi?.mul(amount).div(total) : null;\n    const disabled = !state.pair || !state.selectedLPToken;\n    const label1 = state.selectedLPToken\n        ? t(\"deposited-\", { symbol: state.selectedLPToken.tokenA.symbol })\n        : t(\"deposited-token-1\");\n    const label2 = state.selectedLPToken\n        ? t(\"deposited-\", { symbol: state.selectedLPToken.tokenB.symbol })\n        : t(\"deposited-token-2\");\n    return (\n        <InfoBox>\n            <AmountMeta\n                amount={sushi ? formatBalance(sushi) : \"\"}\n                suffix={\"SUSHI\"}\n                disabled={disabled || isEmptyValue(state.amount)}\n            />\n            <Meta label={t(\"deposited-lp-token\")} text={total ? formatBalance(total) : \"\"} disabled={disabled} />\n            <Meta label={label1} text={state.fromAmount} disabled={disabled} />\n            <Meta label={label2} text={state.toAmount} disabled={disabled} />\n            <WithdrawControls state={state} />\n        </InfoBox>\n    );\n};\n\nconst WithdrawControls = ({ state }: { state: FarmingState }) => {\n    const t = useTranslation();\n    const [error, setError] = useState<MetamaskError>({});\n    useAsyncEffect(() => setError({}), [state.selectedLPToken]);\n    const disabled = isEmptyValue(state.amount);\n    return (\n        <View style={{ marginTop: Spacing.normal }}>\n            {!state.selectedLPToken || state.selectedLPToken.amountDeposited?.isZero() ? (\n                <WithdrawButton state={state} onError={setError} disabled={true} />\n            ) : parseBalance(state.amount, state.selectedLPToken!.decimals).gt(\n                  state.selectedLPToken!.amountDeposited!\n              ) ? (\n                <Button title={t(\"insufficient-amount\")} disabled={true} />\n            ) : state.loading ? (\n                <FetchingButton />\n            ) : (\n                <WithdrawButton state={state} onError={setError} disabled={disabled} />\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </View>\n    );\n};\n\nconst WithdrawButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: FarmingState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const t = useTranslation();\n    const onPress = useCallback(() => {\n        onError({});\n        state.onWithdraw().catch(onError);\n    }, [state.onWithdraw, onError]);\n    return <Button title={t(\"withdraw\")} disabled={disabled} loading={state.withdrawing} onPress={onPress} />;\n};\n\nexport default HarvestScreen;\n"],"sourceRoot":""}