{"version":3,"sources":["src/components/AmountMeta.tsx","src/components/InsufficientBalanceButton.tsx","src/components/ApproveButton.tsx","src/components/Notice.tsx","src/hooks/useMasterChef.tsx","src/hooks/useFarmingState.tsx","src/screens/FarmingScreen.tsx"],"names":["AmountMeta","props","t","useTranslation","useColors","textDark","textLight","placeholder","style","fontSize","IS_DESKTOP","marginBottom","Spacing","normal","color","disabled","amount","suffix","InsufficientBalanceButton","symbol","title","borderRadius","ApproveButton","approveToken","useContext","EthersContext","useState","loading","setLoading","onPress","useCallback","a","async","token","onError","address","spender","tx","wait","onSuccess","hidden","containerStyle","tiny","Notice","borderStyle","border","useStyles","clear","note","text","buttonText","onPressButton","type","size","fontWeight","titleStyle","buttonStyle","paddingHorizontal","paddingVertical","alignSelf","marginTop","useMasterChef","deposit","lpTokenId","signer","masterChef","getContract","MASTER_CHEF","estimateGas","gasLimit","mul","div","logTransaction","toString","withdraw","useFarmingState","myPools","state","useLPTokensState","getTokenAllowance","depositing","setDepositing","withdrawing","setWithdrawing","useEffect","setFromAmount","setToAmount","selectedLPToken","useAsyncEffect","setSelectedLPTokenAllowed","minAllowance","ethers","BigNumber","from","pow","sub","allowance","gte","pair","totalSupply","amountDeposited","lpToken","convertToken","tokenA","tokenB","TokenAmount","lpTokenAmount","tokenAAmount","involvesToken","getLiquidityValue","toFixed","tokenBAmount","onDeposit","id","parseBalance","decimals","setSelectedLPToken","undefined","updateLastTimeRefreshed","onWithdraw","Farming","chainId","large","emptyText","Item","TokenItem","Deposit","DepositInfo","apy","multiplier","onSelectToken","selected","ITEM_SEPARATOR_HEIGHT","alignItems","small","replaceWETH","marginLeft","medium","caption","flex","marginRight","formatPercentage","balance","isZero","AddLiquidityNotice","onAmountChanged","setAmount","autoFocus","green","useLinker","isEmptyValue","sushiRewardedPerYear","sushiPerYear","pow10","formatBalance","label","formatUSD","totalValueUSD","DepositControls","error","setError","approveRequired","selectedLPTokenAllowed","DepositButton","gt","message","code","catch","FarmingScreen","light","Platform","OS"],"mappings":"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","file":"static/js/13.20288ab3.chunk.js","sourcesContent":["import React, { FC } from \"react\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport Text from \"./Text\";\n\nexport interface AmountMetaProps {\n    amount?: string;\n    suffix?: string;\n    disabled?: boolean;\n}\n\nconst AmountMeta: FC<AmountMetaProps> = props => {\n    const t = useTranslation();\n    const { textDark, textLight, placeholder } = useColors();\n    return (\n        <Text\n            style={{\n                fontSize: IS_DESKTOP ? 28 : 20,\n                marginBottom: Spacing.normal,\n                color: props.disabled ? placeholder : props.amount ? textDark : textLight\n            }}>\n            {props.disabled ? t(\"n/a\") : props.amount ? props.amount + \" \" + (props.suffix || \"\") : t(\"fetching\")}\n        </Text>\n    );\n};\n\nexport default AmountMeta;\n","import React from \"react\";\n\nimport useTranslation from \"../hooks/useTranslation\";\nimport Button from \"./Button\";\n\nconst InsufficientBalanceButton = ({ symbol }: { symbol: string }) => {\n    const t = useTranslation();\n    return <Button title={symbol ? t(\"insufficient-\", { symbol }) : t(\"insufficient-balance\")} disabled={true} style={{ borderRadius: 15 }} />;\n};\nexport default InsufficientBalanceButton;\n","import React, { FC, useCallback, useContext, useState } from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport Token from \"../types/Token\";\nimport Button from \"./Button\";\n\nexport interface ApproveButtonProps {\n    token: Token;\n    spender: string;\n    onSuccess: () => void;\n    onError: (e) => void;\n    hidden?: boolean;\n}\n\nconst ApproveButton: FC<ApproveButtonProps> = props => {\n    const t = useTranslation();\n    const { approveToken } = useContext(EthersContext);\n    const [loading, setLoading] = useState(false);\n    const onPress = useCallback(async () => {\n        if (props.token) {\n            props.onError({});\n            setLoading(true);\n            try {\n                const tx = await approveToken(props.token.address, props.spender);\n                if (tx) {\n                    await tx.wait();\n                    props.onSuccess();\n                }\n            } catch (e) {\n                props.onError(e);\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [props.token]);\n    if (props.hidden) return <View />;\n    return (\n        <Button\n            title={t(\"approve-\", { symbol: props.token?.symbol || \"\" })}\n            onPress={onPress}\n            loading={loading}\n            containerStyle={{ marginBottom: Spacing.tiny }}\n            style={{ borderRadius: 15 }}\n        />\n    );\n};\n\nexport default ApproveButton;\n","import React from \"react\";\nimport { View, ViewStyle } from \"react-native\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\nimport Button from \"./Button\";\nimport Text from \"./Text\";\n\nexport interface NoticeProps {\n    text: string;\n    clear?: boolean;\n    color?: string;\n    buttonText?: string;\n    onPressButton?: () => void;\n    style?: ViewStyle;\n}\n\nconst Notice = (props: NoticeProps) => {\n    const { textLight } = useColors();\n    const { border } = useStyles();\n    const borderStyle = border({ color: props.color });\n    const color = props.color || textLight;\n    return (\n        <View style={[props.clear ? {} : borderStyle, props.style]}>\n            <Text note={true} style={{ color, fontSize: IS_DESKTOP ? 13 : 10 }}>\n                {props.text}\n            </Text>\n            {props.buttonText && props.onPressButton && (\n                <Button\n                    title={props.buttonText}\n                    type={\"clear\"}\n                    size={\"small\"}\n                    fontWeight={\"bold\"}\n                    onPress={props.onPressButton}\n                    titleStyle={{ color }}\n                    buttonStyle={{ paddingHorizontal: 0, paddingVertical: 0 }}\n                    style={{ alignSelf: \"flex-end\", marginTop: Spacing.tiny }}\n                />\n            )}\n        </View>\n    );\n};\n\nexport default Notice;\n","import { useCallback } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport { MASTER_CHEF } from \"../constants/contracts\";\nimport { getContract } from \"../utils\";\nimport { logTransaction } from \"../utils/analytics-utils\";\n\nconst useMasterChef = () => {\n    const deposit = useCallback(async (lpTokenId: number, amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const masterChef = getContract(\"MasterChef\", MASTER_CHEF, signer);\n        const gasLimit = await masterChef.estimateGas.deposit(lpTokenId, amount);\n        const tx = await masterChef.deposit(lpTokenId, amount, {\n            gasLimit: gasLimit.mul(120).div(100)\n        });\n        return logTransaction(tx, \"MasterChef.deposit()\", lpTokenId, amount.toString());\n    }, []);\n\n    const withdraw = useCallback(async (lpTokenId: number, amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const masterChef = getContract(\"MasterChef\", MASTER_CHEF, signer);\n        const gasLimit = await masterChef.estimateGas.withdraw(lpTokenId, amount);\n        const tx = await masterChef.withdraw(lpTokenId, amount, {\n            gasLimit: gasLimit.mul(120).div(100)\n        });\n        return logTransaction(tx, \"MasterChef.withdraw()\", lpTokenId, amount.toString());\n    }, []);\n\n    return {\n        deposit,\n        withdraw\n    };\n};\n\nexport default useMasterChef;\n","import { useCallback, useContext, useEffect, useState } from \"react\";\n\nimport { TokenAmount } from \"@luaswap/sdk\";\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { MASTER_CHEF } from \"../constants/contracts\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport { convertToken, parseBalance } from \"../utils\";\nimport useLPTokensState, { LPTokensState } from \"./useLPTokensState\";\nimport useMasterChef from \"./useMasterChef\";\n\nexport interface FarmingState extends LPTokensState {\n    onDeposit: () => Promise<void>;\n    depositing: boolean;\n    onWithdraw: () => Promise<void>;\n    withdrawing: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useFarmingState: (myPools: boolean) => FarmingState = myPools => {\n    const state = useLPTokensState(myPools ? \"my-pools\" : \"pools\");\n    const { signer, getTokenAllowance } = useContext(EthersContext);\n    const { deposit, withdraw } = useMasterChef();\n    const [loading, setLoading] = useState(false);\n    const [depositing, setDepositing] = useState(false);\n    const [withdrawing, setWithdrawing] = useState(false);\n\n    useEffect(() => {\n        setLoading(false);\n        setDepositing(false);\n        setWithdrawing(false);\n        state.setFromAmount(\"\");\n        state.setToAmount(\"\");\n    }, [state.selectedLPToken]);\n\n    useAsyncEffect(async () => {\n        if (signer && state.selectedLPToken) {\n            setLoading(true);\n            state.setSelectedLPTokenAllowed(false);\n            try {\n                const minAllowance = ethers.BigNumber.from(2)\n                    .pow(96)\n                    .sub(1);\n                const allowance = await getTokenAllowance(state.selectedLPToken.address, MASTER_CHEF);\n                state.setSelectedLPTokenAllowed(ethers.BigNumber.from(allowance).gte(minAllowance));\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [signer, state.selectedLPToken]);\n\n    useAsyncEffect(() => {\n        if (\n            state.pair &&\n            state.selectedLPToken &&\n            state.selectedLPToken.totalSupply &&\n            state.selectedLPToken.amountDeposited\n        ) {\n            const lpToken = convertToken(state.selectedLPToken);\n            const tokenA = convertToken(state.selectedLPToken.tokenA);\n            const tokenB = convertToken(state.selectedLPToken.tokenB);\n            const totalSupply = new TokenAmount(lpToken, state.selectedLPToken.totalSupply.toString());\n            const lpTokenAmount = new TokenAmount(lpToken, state.selectedLPToken.amountDeposited.toString());\n            const tokenAAmount = state.pair.involvesToken(tokenA)\n                ? state.pair.getLiquidityValue(tokenA, totalSupply, lpTokenAmount)\n                : null;\n            state.setFromAmount(tokenAAmount?.toFixed() || \"\");\n            const tokenBAmount = state.pair.involvesToken(tokenA)\n                ? state.pair.getLiquidityValue(tokenB, totalSupply, lpTokenAmount)\n                : null;\n            state.setToAmount(tokenBAmount?.toFixed() || \"\");\n        }\n    }, [state.pair, state.selectedLPToken]);\n\n    const onDeposit = useCallback(async () => {\n        if (state.selectedLPToken?.id && state.amount && signer) {\n            setDepositing(true);\n            try {\n                const amount = parseBalance(state.amount, state.selectedLPToken.decimals);\n                const tx = await deposit(state.selectedLPToken.id, amount, signer);\n                await tx.wait();\n                state.setSelectedLPToken(undefined);\n                await state.updateLastTimeRefreshed();\n            } finally {\n                setDepositing(false);\n            }\n        }\n    }, [state.selectedLPToken, state.amount, signer]);\n\n    const onWithdraw = useCallback(async () => {\n        if (state.selectedLPToken?.id && state.amount && signer) {\n            setWithdrawing(true);\n            try {\n                const amount = parseBalance(state.amount, state.selectedLPToken.decimals);\n                const tx = await withdraw(state.selectedLPToken.id, amount, signer);\n                await tx.wait();\n                state.setSelectedLPToken(undefined);\n                await state.updateLastTimeRefreshed();\n            } finally {\n                setWithdrawing(false);\n            }\n        }\n    }, [state.selectedLPToken, state.amount, signer]);\n\n    return {\n        ...state,\n        loading: state.loading || loading,\n        onDeposit,\n        depositing,\n        onWithdraw,\n        withdrawing\n    };\n};\n\nexport default useFarmingState;\n","import React, { FC, useCallback, useContext, useState } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport useAsyncEffect from \"use-async-effect\";\nimport AmountMeta from \"../components/AmountMeta\";\nimport ApproveButton from \"../components/ApproveButton\";\nimport BackgroundImage from \"../components/BackgroundImage\";\nimport Border from \"../components/Border\";\nimport Button from \"../components/Button\";\nimport ChangeNetwork from \"../components/ChangeNetwork\";\nimport CloseIcon from \"../components/CloseIcon\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport FlexView from \"../components/FlexView\";\nimport Heading from \"../components/Heading\";\nimport InfoBox from \"../components/InfoBox\";\nimport InsufficientBalanceButton from \"../components/InsufficientBalanceButton\";\nimport { ITEM_SEPARATOR_HEIGHT } from \"../components/ItemSeparator\";\nimport LPTokenSelect, { LPTokenItemProps } from \"../components/LPTokenSelect\";\nimport Meta from \"../components/Meta\";\nimport Notice from \"../components/Notice\";\nimport Selectable from \"../components/Selectable\";\nimport SelectIcon from \"../components/SelectIcon\";\nimport Text from \"../components/Text\";\nimport Title from \"../components/Title\";\nimport TokenInput from \"../components/TokenInput\";\nimport TokenLogo from \"../components/TokenLogo\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport { FarmingSubMenu } from \"../components/web/WebSubMenu\";\nimport { MASTER_CHEF } from \"../constants/contracts\";\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useColors from \"../hooks/useColors\";\nimport useFarmingState, { FarmingState } from \"../hooks/useFarmingState\";\nimport useLinker from \"../hooks/useLinker\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport { formatBalance, formatPercentage, formatUSD, isEmptyValue, parseBalance, pow10 } from \"../utils\";\nimport Screen from \"./Screen\";\n\nconst FarmingScreen = () => {\n    const t = useTranslation();\n    return (\n        <Screen>\n            <Container>\n                <BackgroundImage />\n                <Content>\n                    <Title text={t(\"plant-lp-tokens\")} />\n                    <Text light={true}>{t(\"plant-lp-tokens-desc\")}</Text>\n                    <Farming />\n                </Content>\n                {Platform.OS === \"web\" && <WebFooter />}\n            </Container>\n            <FarmingSubMenu />\n        </Screen>\n    );\n};\n\nconst Farming = () => {\n    const { chainId } = useContext(EthersContext);\n    if (chainId !== 88) return <ChangeNetwork />;\n    const t = useTranslation();\n    const state = useFarmingState(false);\n    return (\n        <View style={{ marginTop: Spacing.large }}>\n            <LPTokenSelect\n                state={state}\n                title={t(\"active-farms\")}\n                emptyText={t(\"unable-to-load-farms\")}\n                Item={TokenItem}\n            />\n            <Border />\n            <Deposit state={state} />\n            <DepositInfo state={state} />\n            <Notice text={t(\"sushi-vested-notice\")} clear={true} style={{ marginTop: Spacing.normal }} />\n        </View>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst TokenItem: FC<LPTokenItemProps> = props => {\n    const apy = props.token.apy || 0;\n    const multiplier = props.token.multiplier || 0;\n    const onPress = useCallback(() => {\n        props.onSelectToken(props.token);\n    }, [props.onSelectToken, props.token]);\n    return (\n        <Selectable\n            selected={props.selected}\n            onPress={onPress}\n            containerStyle={{ marginBottom: ITEM_SEPARATOR_HEIGHT }}>\n            <FlexView style={{ alignItems: \"center\" }}>\n                <TokenLogo token={props.token.tokenA} small={true} replaceWETH={true} />\n                <TokenLogo token={props.token.tokenB} small={true} replaceWETH={true} style={{ marginLeft: 4 }} />\n                <Text medium={true} caption={true} style={{ marginLeft: Spacing.tiny }}>\n                    {props.token.tokenA.symbol}-{props.token.tokenB.symbol}\n                </Text>\n                <View style={{ flex: 1, alignItems: \"flex-end\", marginRight: 4 }}>\n                    <Text note={true}>\n                        {multiplier > 1 ? \"✨\" : \"\"}\n                        {multiplier.toFixed(2) || \"1.00\"}x APY\n                    </Text>\n                    <Text caption={IS_DESKTOP} medium={true}>\n                        {formatPercentage(apy)}%\n                    </Text>\n                </View>\n                {props.selected ? <CloseIcon /> : <SelectIcon />}\n            </FlexView>\n        </Selectable>\n    );\n};\n\nconst Deposit = ({ state }: { state: FarmingState }) => {\n    const t = useTranslation();\n    if (!state.selectedLPToken) {\n        return <Heading text={t(\"amount\")} disabled={true} />;\n    }\n    return (\n        <View>\n            <Heading text={state.selectedLPToken.symbol + \" \" + t(\"amount\")} />\n            {state.selectedLPToken.balance.isZero() ? (\n                <AddLiquidityNotice state={state} />\n            ) : (\n                <TokenInput\n                    token={state.selectedLPToken}\n                    amount={state.amount}\n                    onAmountChanged={state.setAmount}\n                    autoFocus={IS_DESKTOP}\n                />\n            )}\n        </View>\n    );\n};\n\nconst AddLiquidityNotice = ({ state }: { state: FarmingState }) => {\n    const t = useTranslation();\n    const { green } = useColors();\n    const onPress = useLinker(\"/liquidity\", \"Liquidity\");\n    return (\n        <>\n            <Notice\n                color={green}\n                text={t(\"tokens-needed-for-farming-notice\", { symbol: state.selectedLPToken!.symbol })}\n            />\n            <Button\n                color={green}\n                title={t(\"add-liquidity\")}\n                containerStyle={{ marginTop: Spacing.normal }}\n                onPress={onPress}\n            />\n        </>\n    );\n};\n\nconst DepositInfo = ({ state }: { state: FarmingState }) => {\n    const t = useTranslation();\n    const disabled = isEmptyValue(state.amount) || !state.selectedLPToken?.sushiRewardedPerYear;\n    const sushiPerYear = disabled\n        ? 0\n        : parseBalance(state.amount)\n              .mul(state.selectedLPToken!.sushiRewardedPerYear!)\n              .div(pow10(18));\n    return (\n        <InfoBox>\n            <AmountMeta amount={formatBalance(sushiPerYear, 18, 8)} suffix={t(\"sushi-per-year\")} disabled={disabled} />\n            <Meta\n                label={t(\"my-balance\")}\n                text={formatBalance(state.selectedLPToken?.balance || 0)}\n                disabled={!state.selectedLPToken}\n            />\n            <Meta\n                label={t(\"total-value-locked\")}\n                text={formatUSD(state.selectedLPToken?.totalValueUSD || 0)}\n                disabled={!state.selectedLPToken}\n            />\n            <Meta\n                label={t(\"annual-percentage-yield\")}\n                text={formatPercentage(state.selectedLPToken?.apy || 0)}\n                suffix={\"%\"}\n                disabled={!state.selectedLPToken}\n            />\n            <DepositControls state={state} />\n        </InfoBox>\n    );\n};\n\nconst DepositControls = ({ state }: { state: FarmingState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    useAsyncEffect(() => setError({}), [state.selectedLPToken]);\n    const approveRequired = !state.selectedLPTokenAllowed;\n    const disabled = approveRequired || isEmptyValue(state.amount);\n    return (\n        <View style={{ marginTop: Spacing.normal }}>\n            {!state.selectedLPToken || state.selectedLPToken.balance.isZero() ? (\n                <DepositButton state={state} onError={setError} disabled={true} />\n            ) : parseBalance(state.amount, state.selectedLPToken!.decimals).gt(state.selectedLPToken!.balance) ? (\n                <InsufficientBalanceButton symbol={state.selectedLPToken!.symbol} />\n            ) : state.loading ? (\n                <FetchingButton />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={state.selectedLPToken!}\n                        spender={MASTER_CHEF}\n                        onSuccess={() => state.setSelectedLPTokenAllowed(true)}\n                        onError={setError}\n                        hidden={isEmptyValue(state.amount) || !approveRequired}\n                    />\n                    <DepositButton state={state} onError={setError} disabled={disabled} />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </View>\n    );\n};\n\nconst DepositButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: FarmingState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const t = useTranslation();\n    const onPress = useCallback(() => {\n        onError({});\n        state.onDeposit().catch(onError);\n    }, [state.onDeposit, onError]);\n    return <Button title={t(\"deposit\")} disabled={disabled} loading={state.depositing} onPress={onPress} />;\n};\n\nexport default FarmingScreen;\n"],"sourceRoot":""}