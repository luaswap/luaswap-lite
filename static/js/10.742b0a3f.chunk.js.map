{"version":3,"sources":["src/components/Heading.tsx","src/hooks/useLinker.tsx","src/components/ChangeNetwork.tsx","src/components/Border.tsx","src/components/TokenLogo.tsx","src/components/Loading.tsx","assets/empty-token.png","assets/ETH.png","src/components/TokenAmount.tsx","src/components/TokenSymbol.tsx","src/components/TokenName.tsx","src/components/TokenPrice.tsx","src/components/TokenValue.tsx","src/hooks/useHomeState.tsx","src/screens/HomeScreen.tsx"],"names":["Heading","props","useColors","accent","style","alignItems","height","marginBottom","disabled","Spacing","small","medium","fontWeight","flex","fontSize","IS_DESKTOP","paddingBottom","tiny","text","Platform","OS","path","route","target","history","useHistory","useCallback","window","open","push","_target","navigate","useNavigation","ChangeNetwork","chainId","t","useTranslation","networkName","88","56","justifyContent","light","textAlign","marginVertical","large","Border","border","width","backgroundColor","marginTop","TokenLogo","backgroundLight","useState","error","setError","size","placeholder","require","ETH","source","replaceWETH","isWrappedNativeToken","token","uri","logoURI","borderRadius","onError","opacity","Loading","module","exports","TokenAmount","caption","formatBalance","amount","balance","decimals","TokenSymbol","marginLeft","symbol","TokenName","numberOfLines","ellipsizeMode","TokenPrice","note","formatUSD","priceUSD","TokenValue","valueUSD","useHomeState","useContext","EthersContext","address","tokens","lpTokens","setLPTokens","pools","setPools","loadingLPTokens","setLoadingLPTokens","loadingPools","setLoadingPools","useEffect","undefined","Home","state","View","normal","MyTokens","loadingTokens","goToSwap","useLinker","buttonText","onPressButton","loading","TokenItem","TokenList","renderItem","item","key","data","useMemo","filter","amountDeposited","isZero","sort","t1","t2","length","FlatList","keyExtractor","ItemSeparatorComponent","EmptyList","margin","Text","FlexView","paddingHorizontal","paddingVertical","sum","reduce","previous","current","HomeScreen","totalValue","Screen","Container","BackgroundImage","Content","huge","borderStyle","borderWidth","borderColor","Title"],"mappings":"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","file":"static/js/10.742b0a3f.chunk.js","sourcesContent":["import React, { FC } from \"react\";\nimport { TextStyle, View } from \"react-native\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport Button from \"./Button\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\ninterface HeadingProps {\n    text: string;\n    fontWeight?: \"light\" | \"regular\" | \"bold\";\n    disabled?: boolean;\n    buttonText?: string;\n    onPressButton?: () => void | Promise<void>;\n    style?: TextStyle;\n}\n\nconst Heading: FC<HeadingProps> = props => {\n    const { accent } = useColors();\n    return (\n        <View style={{ alignItems: \"flex-start\", height: 32, marginBottom: props.disabled ? 0 : Spacing.small }}>\n            <Text\n                medium={true}\n                fontWeight={props.fontWeight || \"bold\"}\n                disabled={props.disabled}\n                style={[{ flex: 1, fontSize: IS_DESKTOP ? 20 : 18, paddingBottom: Spacing.tiny }, props.style]}>\n                {props.text}\n            </Text>\n            {/* {props.buttonText && (\n                <Button\n                    type={\"clear\"}\n                    size={\"small\"}\n                    title={props.buttonText}\n                    onPress={props.onPressButton}\n                    color={accent}\n                    buttonStyle={{ paddingHorizontal: Spacing.tiny }}\n                />\n            )} */}\n        </View>\n    );\n};\n\nexport default Heading;\n","import { useCallback } from \"react\";\nimport { Platform } from \"react-native\";\nimport { useHistory } from \"react-router-dom\";\n\nimport { useNavigation } from \"@react-navigation/native\";\n\nconst useWebLinker = (path: string, route: string, target?: string) => {\n    const history = useHistory();\n    return useCallback(() => {\n        if (target) {\n            window.open(path, target);\n        } else {\n            history.push(path);\n        }\n    }, [path, target]);\n};\n\nconst useAppLinker = (path: string, route: string, _target?: string) => {\n    const { navigate } = useNavigation();\n    return useCallback(() => {\n        navigate(route);\n    }, [route]);\n};\n\nexport default Platform.OS === \"web\" ? useWebLinker : useAppLinker;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport Text from \"./Text\";\n\nconst ChangeNetwork = ({ chainId = 88 }) => {\n    const t = useTranslation();\n    const networkName = {\n        // 1: \"Ethereum Mainnet\",\n        // 42: \"Ethereum Kovan\",\n        88: \"TomoChain Mainnet\",\n        56: \"Binance Smart Chain Mainnet\"\n    }[chainId];\n    return (\n        <View style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\" }}>\n            <Text light={true} style={{ textAlign: \"center\", marginVertical: Spacing.large }}>\n                {t(\"change-network-to\", { networkName })}\n            </Text>\n        </View>\n    );\n};\n\nexport default ChangeNetwork;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\n\nconst Border = props => {\n    const { border } = useColors();\n    return (\n        <View\n            style={{\n                height: 1,\n                width: \"100%\",\n                backgroundColor: border,\n                marginTop: props.small ? Spacing.tiny : Spacing.small,\n                marginBottom: props.small ? Spacing.tiny : Spacing.small + Spacing.tiny\n            }}\n        />\n    );\n};\n\nexport default Border;\n","import React, { useContext, useState } from \"react\";\nimport { Image, View, ViewStyle } from \"react-native\";\n\nimport useColors from \"../hooks/useColors\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport Token from \"../types/Token\";\nimport { isWrappedNativeToken } from \"../utils\";\n\nconst TokenLogo = (props: {\n    token: Token;\n    small?: boolean;\n    replaceWETH?: boolean;\n    disabled?: boolean;\n    style?: ViewStyle;\n}) => {\n    const { backgroundLight: disabled } = useColors();\n    const [error, setError] = useState(false);\n    const size = props.small ? 22 : 27;\n    const placeholder = require(\"../../assets/empty-token.png\");\n    const ETH = require(\"../../assets/ETH.png\");\n    const source = props.replaceWETH && isWrappedNativeToken(props.token) ? ETH : { uri: props.token.logoURI };\n    return (\n        <View\n            style={[\n                {\n                    width: size,\n                    height: size,\n                    backgroundColor: props.disabled ? disabled : \"white\",\n                    borderRadius: size / 2\n                },\n                props.style\n            ]}>\n            <Image\n                source={!props.token.logoURI || error ? placeholder : source}\n                onError={() => setError(true)}\n                style={{\n                    width: \"100%\",\n                    height: \"100%\",\n                    borderRadius: size / 2,\n                    opacity: props.disabled ? 0.5 : 1\n                }}\n            />\n        </View>\n    );\n};\n\nexport default TokenLogo;\n","import React from \"react\";\nimport { ActivityIndicator } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\n\nconst Loading = () => <ActivityIndicator size={\"large\"} style={{ marginVertical: Spacing.large }} />;\n\nexport default Loading;\n","module.exports = __webpack_public_path__ + \"static/media/empty-token.e8aa64c5.png\";","module.exports = __webpack_public_path__ + \"static/media/ETH.ab794f02.png\";","import React from \"react\";\nimport { TextStyle } from \"react-native\";\n\nimport { ethers } from \"ethers\";\nimport { IS_DESKTOP } from \"../constants/dimension\";\nimport Token from \"../types/Token\";\nimport { formatBalance } from \"../utils\";\nimport Text from \"./Text\";\n\nconst TokenAmount = (props: { token: Token; amount?: ethers.BigNumber; disabled?: boolean; style?: TextStyle }) => (\n    <Text caption={IS_DESKTOP}\n        disabled={props.disabled}\n        style={props.style}>\n        {formatBalance(props.amount || props.token.balance, props.token.decimals, 8)}\n    </Text>\n);\n\nexport default TokenAmount;\n","import React from \"react\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport Token from \"../types/Token\";\nimport Text from \"./Text\";\n\nconst TokenSymbol = (props: { token: Token; disabled?: boolean }) => (\n    <Text\n        medium={true}\n        caption={true}\n        disabled={props.disabled}\n        style={{ marginLeft: Spacing.tiny, fontWeight: \"bold\" }}>\n        {props.token.symbol}\n    </Text>\n);\n\nexport default TokenSymbol;\n","import React from \"react\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport Token from \"../types/Token\";\nimport Text from \"./Text\";\n\nconst TokenName = (props: { token: Token; disabled?: boolean }) => (\n    <Text\n        caption={true}\n        numberOfLines={1}\n        ellipsizeMode={\"tail\"}\n        style={{ marginLeft: Spacing.small, width: 180 }}\n        fontWeight={\"bold\"}\n        disabled={props.disabled}>\n        {props.token.symbol}\n    </Text>\n);\n\nexport default TokenName;\n","import React, { FC } from \"react\";\nimport { TextStyle } from \"react-native\";\n\nimport TokenWithValue from \"../types/TokenWithValue\";\nimport { formatUSD } from \"../utils\";\nimport Text from \"./Text\";\n\nexport interface TokenPriceProps {\n    token: TokenWithValue;\n    disabled?: boolean;\n    style?: TextStyle;\n}\n\nconst TokenPrice: FC<TokenPriceProps> = props => {\n    return (\n        <Text note={true} fontWeight={\"light\"} disabled={props.disabled} style={props.style}>\n            {formatUSD(props.token.priceUSD || 0, 4)}\n        </Text>\n    );\n};\n\nexport default TokenPrice;\n","import React, { FC } from \"react\";\nimport { TextStyle } from \"react-native\";\n\nimport TokenWithValue from \"../types/TokenWithValue\";\nimport { formatUSD } from \"../utils\";\nimport Text from \"./Text\";\n\nexport interface TokenValueProps {\n    token: TokenWithValue;\n    disabled?: boolean;\n    style?: TextStyle;\n}\n\nconst TokenValue: FC<TokenValueProps> = props => {\n    return (\n        <Text note={true} fontWeight={\"light\"} disabled={props.disabled} style={props.style}>\n            {formatUSD(props.token.valueUSD || 0, 4)}\n        </Text>\n    );\n};\n\nexport default TokenValue;\n","import { useContext, useEffect, useState } from \"react\";\n\n// import luaData from \"../../lua-data.js\";\n// import useAsyncEffect from \"use-async-effect\";\n// import Fraction from \"../constants/Fraction\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport LPTokenWithValue from \"../types/LPTokenWithValue\";\n// import { isWrappedNativeToken } from \"../utils\";\n// import { fetchLPTokenWithValue, fetchMyLPTokens, fetchMyPools } from \"../utils/fetch-utils\";\n// import useSDK from \"./useSDK\";\n\nexport interface HomeState {\n    loadingLPTokens: boolean;\n    loadingPools: boolean;\n    lpTokens?: LPTokenWithValue[];\n    pools?: LPTokenWithValue[];\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useHomeState = () => {\n    const { address, tokens } = useContext(EthersContext);\n    const [lpTokens, setLPTokens] = useState<LPTokenWithValue[]>();\n    const [pools, setPools] = useState<LPTokenWithValue[]>();\n    const [loadingLPTokens, setLoadingLPTokens] = useState(true);\n    const [loadingPools, setLoadingPools] = useState(true);\n    // const { getPair } = useSDK();\n\n    useEffect(() => {\n        setLPTokens(undefined);\n        setPools(undefined);\n        // setLoadingLPTokens(true);\n        setLoadingLPTokens(false);\n        // setLoadingPools(true);\n        setLoadingPools(false);\n    }, [address]);\n\n    // // Load Liquidity\n    // useAsyncEffect(async () => {\n    //     const weth = tokens.find(t => isWrappedNativeToken(t));\n    //     if (provider && signer && weth && tokens && tokens.length > 0) {\n    //         setLoadingLPTokens(true);\n    //         const wethPriceUSD = Fraction.parse(String(await luaData.weth.price()));\n    //         const fetched = await fetchMyLPTokens(await signer.getAddress(), tokens, provider);\n    //         try {\n    //             setLPTokens(\n    //                 await Promise.all(\n    //                     fetched.map(lpToken => fetchLPTokenWithValue(lpToken, weth, wethPriceUSD, getPair, provider))\n    //                 )\n    //             );\n    //         } finally {\n    //             setLoadingLPTokens(false);\n    //         }\n    //     }\n    // }, [getPair, provider, signer, tokens]);\n\n    // // Load Farming\n    // useAsyncEffect(async () => {\n    //     const weth = tokens.find(t => isWrappedNativeToken(t));\n    //     if (provider && signer && weth && tokens && tokens.length > 0 && lpTokens) {\n    //         setLoadingPools(true);\n    //         const wethPriceUSD = Fraction.parse(String(await luaData.weth.price()));\n    //         const fetched = await fetchMyPools(await signer.getAddress(), tokens, provider);\n    //         try {\n    //             setPools(\n    //                 await Promise.all(\n    //                     fetched.map(lpToken => fetchLPTokenWithValue(lpToken, weth, wethPriceUSD, getPair, provider))\n    //                 )\n    //             );\n    //         } finally {\n    //             setLoadingPools(false);\n    //         }\n    //     }\n    // }, [getPair, provider, signer, tokens, lpTokens]);\n\n    return {\n        loadingLPTokens,\n        loadingPools,\n        tokens,\n        lpTokens,\n        pools\n    };\n};\n\nexport default useHomeState;\n","import React, { FC, useCallback, useContext, useMemo } from \"react\";\nimport { FlatList, Platform, TouchableHighlight, View } from \"react-native\";\nimport { Icon } from \"react-native-elements\";\n\nimport { ethers } from \"ethers\";\nimport BackgroundImage from \"../components/BackgroundImage\";\nimport ChangeNetwork from \"../components/ChangeNetwork\";\nimport Border from \"../components/Border\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport FlexView from \"../components/FlexView\";\nimport Heading from \"../components/Heading\";\nimport Loading from \"../components/Loading\";\nimport Text from \"../components/Text\";\nimport Title from \"../components/Title\";\nimport TokenAmount from \"../components/TokenAmount\";\nimport TokenLogo from \"../components/TokenLogo\";\nimport TokenName from \"../components/TokenName\";\nimport TokenPrice from \"../components/TokenPrice\";\nimport TokenSymbol from \"../components/TokenSymbol\";\nimport TokenValue from \"../components/TokenValue\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useColors from \"../hooks/useColors\";\nimport useHomeState, { HomeState } from \"../hooks/useHomeState\";\nimport useLinker from \"../hooks/useLinker\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport LPTokenWithValue from \"../types/LPTokenWithValue\";\nimport TokenWithValue from \"../types/TokenWithValue\";\nimport { formatUSD } from \"../utils\";\nimport Screen from \"./Screen\";\n\ninterface TokenItemProps {\n    token: TokenWithValue;\n    disabled?: boolean;\n}\n\ninterface LPTokenItemProps {\n    token: LPTokenWithValue;\n    disabled?: boolean;\n}\n\nconst HomeScreen = () => {\n    const { chainId } = useContext(EthersContext);\n    const { border } = useColors()\n    if (chainId !== 88) return <ChangeNetwork />;\n\n    const t = useTranslation();\n    const state = useHomeState();\n    const { loadingTokens } = useContext(EthersContext);\n    const loading = loadingTokens || state.loadingLPTokens || state.loadingPools;\n    const totalValue = sum(state.tokens) + sum(state.lpTokens) + sum(state.pools);\n    return (\n        <Screen>\n            <Container style={{ marginTop: 50 }}>\n                <BackgroundImage />\n                <Content style={{ paddingBottom: Spacing.huge, borderRadius: 16, borderStyle: 'solid', borderWidth: 1, borderColor: border }}>\n                    <Title text={t(\"total-value\")} style={{ flex: 1, marginTop: Spacing.normal }} />\n                    <Title\n                        text={loading ? t(\"fetching\") : formatUSD(totalValue, 4)}\n                        fontWeight={\"light\"}\n                        disabled={loading}\n                        style={{ fontSize: IS_DESKTOP ? 32 : 24 }}\n                    />\n                    <Home state={state} />\n                </Content>\n                {/* {Platform.OS === \"web\" && <WebFooter />} */}\n            </Container>\n        </Screen>\n    );\n};\n\nconst Home = ({ state }: { state: HomeState }) => {\n    return (\n        <View style={{ marginTop: IS_DESKTOP ? Spacing.large : Spacing.normal }}>\n            <MyTokens state={state} />\n            <View style={{ height: Spacing.large }} />\n            {/* <MyLPTokens state={state} /> */}\n            {/* <View style={{ height: Spacing.large }} /> */}\n            {/* <Pools state={state} /> */}\n        </View>\n    );\n};\n\nconst MyTokens = ({ state }: { state: HomeState }) => {\n    const t = useTranslation();\n    const { loadingTokens, tokens } = useContext(EthersContext);\n    const goToSwap = useLinker(\"/swap\", \"Swap\");\n    return (\n        <View>\n            <Heading text={t(\"tokens\")} buttonText={t(\"manage\")} onPressButton={goToSwap} />\n            <TokenList loading={loadingTokens} tokens={tokens} TokenItem={TokenItem} />\n        </View>\n    );\n};\n\nconst MyLPTokens = ({ state }: { state: HomeState }) => {\n    const t = useTranslation();\n    const goToRemoveLiquidity = useLinker(\"/liquidity/remove\", \"RemoveLiquidity\");\n    return (\n        <View>\n            <Heading text={t(\"liquidity\")} buttonText={t(\"manage\")} onPressButton={goToRemoveLiquidity} />\n            {/* @ts-ignore */}\n            <TokenList loading={state.loadingLPTokens} tokens={state.lpTokens} TokenItem={LPTokenItem} />\n        </View>\n    );\n};\n\nconst Pools = ({ state }: { state: HomeState }) => {\n    const t = useTranslation();\n    const goToFarming = useLinker(\"/farming\", \"Farming\");\n    return (\n        <View>\n            <Heading text={t(\"farms\")} buttonText={t(\"manage\")} onPressButton={goToFarming} />\n            {/* @ts-ignore */}\n            <TokenList loading={state.loadingPools} tokens={state.pools} TokenItem={LPTokenItem} />\n        </View>\n    );\n};\n\nconst TokenList = (props: {\n    loading: boolean;\n    tokens?: TokenWithValue[] | LPTokenWithValue[];\n    TokenItem: FC<TokenItemProps | LPTokenItemProps>;\n}) => {\n    const renderItem = useCallback(({ item }) => {\n        return <props.TokenItem key={item.address} token={item} />;\n    }, []);\n    const data = useMemo(\n        () =>\n            (props.tokens || [])\n                // @ts-ignore\n                .filter(token => !(token.amountDeposited ? token.amountDeposited.isZero() : token.balance.isZero()))\n                .sort((t1, t2) => (t2.valueUSD || 0) - (t1.valueUSD || 0)),\n        [props.tokens]\n    );\n    return props.loading ? (\n        <Loading />\n    ) : data.length === 0 ? (\n        <EmptyList />\n    ) : (\n        <FlatList\n            keyExtractor={item => item.address}\n            data={data}\n            renderItem={renderItem}\n            ItemSeparatorComponent={() => <Border small={true} />}\n        />\n    );\n};\n\nconst EmptyList = () => {\n    const t = useTranslation();\n    return (\n        <View style={{ margin: Spacing.normal }}>\n            <Text disabled={true} style={{ textAlign: \"center\", width: \"100%\" }}>\n                {t(\"you-dont-have-assets\")}\n            </Text>\n        </View>\n    );\n};\n\nconst TokenItem = (props: TokenItemProps) => {\n    return (\n        <FlexView style={{ alignItems: \"center\", paddingHorizontal: Spacing.tiny, paddingVertical: 4 }}>\n            <TokenLogo token={props.token} disabled={props.disabled} />\n            <View>\n                <TokenPrice token={props.token} disabled={props.disabled} style={{ marginLeft: Spacing.small }} />\n                <TokenName token={props.token} disabled={props.disabled} />\n            </View>\n            <View style={{ flex: 1, alignItems: \"flex-end\" }}>\n                <TokenValue token={props.token} disabled={props.disabled} />\n                <FlexView>\n                    <TokenAmount token={props.token} disabled={props.disabled} />\n                    {IS_DESKTOP && <TokenSymbol token={props.token} disabled={props.disabled} />}\n                </FlexView>\n            </View>\n            {/* <ExternalIcon path={\"/tokens/\" + props.token.address} /> */}\n        </FlexView>\n    );\n};\n\nconst LPTokenItem = (props: LPTokenItemProps) => {\n    return (\n        <FlexView style={{ alignItems: \"center\", paddingHorizontal: Spacing.tiny, paddingVertical: 4 }}>\n            <TokenLogo token={props.token.tokenA} small={true} replaceWETH={true} />\n            <TokenLogo token={props.token.tokenB} small={true} replaceWETH={true} style={{ marginLeft: 4 }} />\n            <Text medium={true} caption={true} style={{ marginLeft: Spacing.tiny }}>\n                {props.token.tokenA.symbol}-{props.token.tokenB.symbol}\n            </Text>\n            <View style={{ flex: 1, alignItems: \"flex-end\" }}>\n                <TokenValue token={props.token} disabled={props.disabled} />\n                <FlexView>\n                    <TokenAmount token={props.token} amount={props.token.amountDeposited} disabled={props.disabled} />\n                </FlexView>\n            </View>\n            <ExternalIcon path={\"/pairs/\" + props.token.address} />\n        </FlexView>\n    );\n};\n\nconst ExternalIcon = ({ path }) => {\n    const { textDark, disabled } = useColors();\n    const onPress = () => window.open(\"https://sushiswapanalytics.com/\" + path.toLowerCase(), \"_blank\");\n    const isETH = path.endsWith(ethers.constants.AddressZero);\n    return (\n        <TouchableHighlight onPress={onPress} disabled={isETH}>\n            <Icon\n                type={\"evilicon\"}\n                name={\"external-link\"}\n                color={isETH ? disabled : textDark}\n                style={{ marginLeft: Spacing.tiny }}\n            />\n        </TouchableHighlight>\n    );\n};\n\nconst sum = tokens => (tokens ? tokens.reduce((previous, current) => previous + (current.valueUSD || 0), 0) : 0);\n\nexport default HomeScreen;\n"],"sourceRoot":""}