{"version":3,"sources":["src/components/Heading.tsx","src/hooks/useLinker.tsx","src/components/ChangeNetwork.tsx","src/components/ErrorMessage.tsx","src/components/InfoBox.tsx","src/components/AmountMeta.tsx","src/components/Border.tsx","src/components/InsufficientBalanceButton.tsx","src/components/FetchingButton.tsx","src/components/TokenInput.tsx","src/components/web/WebFooter.tsx","src/components/Notice.tsx","src/components/Input.tsx","assets/flags/us.png","assets/flags/cn.png","assets/flags/kr.png","assets/flags/fr.png","assets/flags/es.png","assets/flags/jp.png","src/hooks/useSushiBar.tsx","src/hooks/useStakingState.tsx","src/screens/UnstakeScreen.tsx"],"names":["Heading","props","useColors","accent","style","alignItems","height","marginBottom","disabled","Spacing","small","medium","fontWeight","flex","fontSize","IS_DESKTOP","paddingBottom","tiny","text","Platform","OS","path","route","target","history","useHistory","useCallback","window","open","push","_target","navigate","useNavigation","ChangeNetwork","chainId","t","useTranslation","networkName","88","56","justifyContent","light","textAlign","marginVertical","large","ErrorMessage","error","borderColor","borderWidth","width","padding","marginTop","code","color","note","message","InfoBox","darkMode","useContext","GlobalContext","backgroundLight","borderDark","border","useStyles","radius","backgroundColor","AmountMeta","textDark","textLight","placeholder","normal","amount","suffix","Border","InsufficientBalanceButton","symbol","title","borderRadius","FetchingButton","MaxButton","onPressMax","a","async","token","balance","isNativeToken","fee","pow10","gt","sub","ethers","constants","Zero","trc21Fee","updateAmount","formatBalance","decimals","position","right","bottom","type","size","maxButtonText","onPress","buttonStyle","paddingHorizontal","TokenInput","onChangeText","onAmountChanged","parseBalance","e","endsWith","indexOf","length","label","value","keyboardType","autoFocus","inputContainerStyle","borderBottomWidth","labelStyle","fontFamily","hideMaxButton","FLAGS","us","require","cn","kr","fr","es","jp","Flag","name","locale","location","useLocation","pathname","marginHorizontal","source","WebFooter","simple","useLinker","Notice","borderStyle","clear","buttonText","onPressButton","titleStyle","paddingVertical","alignSelf","Input","textMedium","onError","errors","forbidden","forEach","validation","match","regexp","allowed","join","inputStyle","minHeight","outline","placeholderTextColor","errorStyle","containerStyle","module","exports","useSushiBar","enter","signer","sushiBar","getContract","SUSHI_BAR","estimateGas","gasLimit","mul","div","tx","logTransaction","toString","leave","useStakingState","EthersContext","address","getTokenAllowance","tokens","updateTokens","useState","sushiStaked","setSushiStaked","sushiSupply","setSushiSupply","xSushiSupply","setXSushiSupply","setAmount","sushiAllowed","setSushiAllowed","xSushiAllowed","setXSushiAllowed","loading","setLoading","entering","setEntering","leaving","setLeaving","sushi","useMemo","find","xSushi","useEffect","useAsyncEffect","minAllowance","BigNumber","from","pow","sushiAllowance","gte","xSushiAllowance","sushiContract","balanceOf","totalSupply","xSushiContract","onEnter","parsed","wait","onLeave","Staking","state","XSushiBalance","AmountInput","isZero","UnstakeInfo","isEmptyValue","sushiAmount","undefined","Controls","setError","UnstakeButton","UnstakeScreen"],"mappings":"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","file":"static/js/7.bb98886e.chunk.js","sourcesContent":["import React, { FC } from \"react\";\nimport { TextStyle, View } from \"react-native\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport Button from \"./Button\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\ninterface HeadingProps {\n    text: string;\n    fontWeight?: \"light\" | \"regular\" | \"bold\";\n    disabled?: boolean;\n    buttonText?: string;\n    onPressButton?: () => void | Promise<void>;\n    style?: TextStyle;\n}\n\nconst Heading: FC<HeadingProps> = props => {\n    const { accent } = useColors();\n    return (\n        <View style={{ alignItems: \"flex-start\", height: 32, marginBottom: props.disabled ? 0 : Spacing.small }}>\n            <Text\n                medium={true}\n                fontWeight={props.fontWeight || \"bold\"}\n                disabled={props.disabled}\n                style={[{ flex: 1, fontSize: IS_DESKTOP ? 20 : 18, paddingBottom: Spacing.tiny }, props.style]}>\n                {props.text}\n            </Text>\n            {/* {props.buttonText && (\n                <Button\n                    type={\"clear\"}\n                    size={\"small\"}\n                    title={props.buttonText}\n                    onPress={props.onPressButton}\n                    color={accent}\n                    buttonStyle={{ paddingHorizontal: Spacing.tiny }}\n                />\n            )} */}\n        </View>\n    );\n};\n\nexport default Heading;\n","import { useCallback } from \"react\";\nimport { Platform } from \"react-native\";\nimport { useHistory } from \"react-router-dom\";\n\nimport { useNavigation } from \"@react-navigation/native\";\n\nconst useWebLinker = (path: string, route: string, target?: string) => {\n    const history = useHistory();\n    return useCallback(() => {\n        if (target) {\n            window.open(path, target);\n        } else {\n            history.push(path);\n        }\n    }, [path, target]);\n};\n\nconst useAppLinker = (path: string, route: string, _target?: string) => {\n    const { navigate } = useNavigation();\n    return useCallback(() => {\n        navigate(route);\n    }, [route]);\n};\n\nexport default Platform.OS === \"web\" ? useWebLinker : useAppLinker;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport Text from \"./Text\";\n\nconst ChangeNetwork = ({ chainId = 88 }) => {\n    const t = useTranslation();\n    const networkName = {\n        // 1: \"Ethereum Mainnet\",\n        // 42: \"Ethereum Kovan\",\n        88: \"TomoChain Mainnet\",\n        56: \"Binance Smart Chain Mainnet\"\n    }[chainId];\n    return (\n        <View style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\" }}>\n            <Text light={true} style={{ textAlign: \"center\", marginVertical: Spacing.large }}>\n                {t(\"change-network-to\", { networkName })}\n            </Text>\n        </View>\n    );\n};\n\nexport default ChangeNetwork;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport Text from \"./Text\";\n\nconst ErrorMessage = ({ error }: { error: MetamaskError }) => (\n    <View\n        style={{\n            borderColor: \"red\",\n            borderWidth: 1,\n            width: \"100%\",\n            padding: Spacing.tiny,\n            marginTop: Spacing.small\n        }}>\n        {error.code && (\n            <Text fontWeight={\"bold\"} style={{ color: \"red\", fontSize: 14 }}>\n                Error Code {error.code}\n            </Text>\n        )}\n        <Text note={true} style={{ color: \"red\", fontSize: 14 }}>\n            {error.message}\n        </Text>\n    </View>\n);\n\nexport default ErrorMessage;\n","import React, { PropsWithChildren, useContext } from \"react\";\nimport { View, ViewProps } from \"react-native\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\n\nconst InfoBox = (props: PropsWithChildren<ViewProps>) => {\n    const { darkMode } = useContext(GlobalContext);\n    const { backgroundLight, borderDark } = useColors();\n    const { border } = useStyles();\n    return (\n        <View\n            {...props}\n            style={[\n                {\n                    ...border({ radius: 20, color: darkMode ? borderDark : backgroundLight }),\n                    backgroundColor: backgroundLight,\n                    // marginTop: !IS_DESKTOP ? Spacing.normal + Spacing.small : 0,\n                    padding: Spacing.small + Spacing.tiny\n                },\n                props.style\n            ]}\n        />\n    );\n};\n\nexport default InfoBox;\n","import React, { FC } from \"react\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport Text from \"./Text\";\n\nexport interface AmountMetaProps {\n    amount?: string;\n    suffix?: string;\n    disabled?: boolean;\n}\n\nconst AmountMeta: FC<AmountMetaProps> = props => {\n    const t = useTranslation();\n    const { textDark, textLight, placeholder } = useColors();\n    return (\n        <Text\n            style={{\n                fontSize: IS_DESKTOP ? 28 : 20,\n                marginBottom: Spacing.normal,\n                color: props.disabled ? placeholder : props.amount ? textDark : textLight\n            }}>\n            {props.disabled ? t(\"n/a\") : props.amount ? props.amount + \" \" + (props.suffix || \"\") : t(\"fetching\")}\n        </Text>\n    );\n};\n\nexport default AmountMeta;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\n\nconst Border = props => {\n    const { border } = useColors();\n    return (\n        <View\n            style={{\n                height: 1,\n                width: \"100%\",\n                backgroundColor: border,\n                marginTop: props.small ? Spacing.tiny : Spacing.small,\n                marginBottom: props.small ? Spacing.tiny : Spacing.small + Spacing.tiny\n            }}\n        />\n    );\n};\n\nexport default Border;\n","import React from \"react\";\n\nimport useTranslation from \"../hooks/useTranslation\";\nimport Button from \"./Button\";\n\nconst InsufficientBalanceButton = ({ symbol }: { symbol: string }) => {\n    const t = useTranslation();\n    return <Button title={symbol ? t(\"insufficient-\", { symbol }) : t(\"insufficient-balance\")} disabled={true} style={{ borderRadius: 15 }} />;\n};\nexport default InsufficientBalanceButton;\n","import React from \"react\";\n\nimport useTranslation from \"../hooks/useTranslation\";\nimport Button from \"./Button\";\n\nconst FetchingButton = () => {\n    const t = useTranslation();\n    return <Button title={t(\"fetching\")} disabled={true} style={{ borderRadius: 15 }} />;\n};\nexport default FetchingButton;\n","import React, { FC, useCallback } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport { BigNumber, ethers } from \"ethers\";\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\n// import useStyles from \"../hooks/useStyles\";\nimport Token from \"../types/Token\";\nimport { formatBalance, isNativeToken, parseBalance, pow10 } from \"../utils\";\nimport Button from \"./Button\";\nimport Heading from \"./Heading\";\nimport Input from \"./Input\";\n\nexport interface TokenInputProps {\n    title?: string;\n    token?: Token;\n    amount: string;\n    onAmountChanged: (amount: string) => void;\n    label?: string;\n    hideMaxButton?: boolean;\n    maxButtonText?: string;\n    autoFocus?: boolean;\n    trc21Fee?: BigNumber;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst TokenInput: FC<TokenInputProps> = props => {\n    // const { border } = useStyles();\n    const onChangeText = useCallback(\n        (text: string) => {\n            if (props.token && props.onAmountChanged) {\n                try {\n                    parseBalance(text, props.token.decimals);\n                    props.onAmountChanged(text);\n                } catch (e) {\n                    if (text.endsWith(\".\") && text.indexOf(\".\") === text.length - 1) {\n                        props.onAmountChanged(text);\n                    }\n                }\n            }\n        },\n        [props.token, props.onAmountChanged]\n    );\n    return (\n        <View>\n            {props.title && <Heading text={props.title} />}\n            <View>\n                <Input\n                    label={props.label}\n                    value={props.amount}\n                    onChangeText={onChangeText}\n                    placeholder={\"0.0\"}\n                    keyboardType={\"numeric\"}\n                    autoFocus={props.autoFocus || false}\n                    // inputStyle={{ marginHorizontal: Spacing.tiny }}\n                    inputContainerStyle={{ borderBottomWidth: 0 }}\n                    labelStyle={{ fontFamily: \"light\", height: props.label ? \"auto\" : 0 }}\n                // containerStyle={{\n                //     ...border(),\n                //     paddingHorizontal: Spacing.tiny,\n                //     paddingVertical: 15\n                //     // paddingTop: 15,\n                //     // paddingBottom: 2\n                // }}\n                />\n                {props.token?.balance?.gt(0) && !props.hideMaxButton && (\n                    <MaxButton\n                        token={props.token}\n                        maxButtonText={props.maxButtonText}\n                        updateAmount={props.onAmountChanged}\n                        trc21Fee={props.trc21Fee}\n                    />\n                )}\n            </View>\n        </View>\n    );\n};\n\nconst MaxButton = (props: { token: Token; updateAmount; maxButtonText?: string; trc21Fee?: BigNumber }) => {\n    const { accent } = useColors();\n    const onPressMax = useCallback(async () => {\n        if (props.token) {\n            let balance = props.token.balance;\n            if (isNativeToken(props.token)) {\n                // Subtract 0.01 ETH for gas fee\n                const fee = pow10(16);\n                balance = balance.gt(fee) ? balance.sub(fee) : ethers.constants.Zero;\n            } else if (props.trc21Fee) {\n                balance = balance.gt(props.trc21Fee) ? balance.sub(props.trc21Fee) : ethers.constants.Zero\n            }\n            props.updateAmount(formatBalance(balance, props.token.decimals));\n        }\n    }, [props.token, props.updateAmount, props.trc21Fee]);\n\n    return (\n        <View style={{ position: \"absolute\", right: 12, bottom: Platform.OS === \"web\" ? 17 : 24 }}>\n            <Button\n                type={\"clear\"}\n                size={\"small\"}\n                color={accent}\n                title={props.maxButtonText || (IS_DESKTOP ? \"MAX \" + props.token.symbol : \"MAX\")}\n                fontWeight={\"bold\"}\n                onPress={onPressMax}\n                buttonStyle={{ paddingHorizontal: Spacing.tiny }}\n            />\n        </View>\n    );\n};\n\nexport default TokenInput;\nfunction signer(arg0: string, address: string, signer: any, Signer: typeof ethers.Signer) {\n    throw new Error(\"Function not implemented.\");\n}\n\n","import React from \"react\";\nimport { Image, TouchableHighlight, View } from \"react-native\";\nimport { useHistory, useLocation } from \"react-router-dom\";\n\nimport Constants from \"expo-constants\";\n\nimport { Spacing } from \"../../constants/dimension\";\nimport useLinker from \"../../hooks/useLinker\";\nimport FlexView from \"../FlexView\";\nimport SocialIcons from \"../SocialIcons\";\nimport Text from \"../Text\";\n\nconst FLAGS = {\n    us: require(\"../../../assets/flags/us.png\"),\n    cn: require(\"../../../assets/flags/cn.png\"),\n    kr: require(\"../../../assets/flags/kr.png\"),\n    fr: require(\"../../../assets/flags/fr.png\"),\n    es: require(\"../../../assets/flags/es.png\"),\n    jp: require(\"../../../assets/flags/jp.png\")\n};\n\nconst ALCHEMY_URL = \"https://dashboard.alchemyapi.io/signup?referral=429fb682-0d85-40ab-ad88-daf847cf7c63\";\n\nconst WebFooter = ({ simple = false }) => {\n    const onPressAlchemy = useLinker(ALCHEMY_URL, \"\", \"_blank\");\n    return (\n        <View style={{ width: \"100%\", padding: Spacing.normal, alignItems: \"center\" }}>\n            {/* {!simple && (\n                <>\n                    <SocialIcons />\n                    <TouchableHighlight onPress={onPressAlchemy}>\n                        <Image\n                            source={require(\"../../../assets/alchemy.png\")}\n                            style={{ width: 188, height: 40, marginTop: Spacing.tiny }}\n                        />\n                    </TouchableHighlight>\n                </>\n            )}\n            <Text note={true} style={{ marginTop: Spacing.tiny }}>\n                Built with ❤️ by SushiSwap (v{Constants.manifest.version})\n            </Text> */}\n            <FlexView style={{ marginTop: Spacing.small }}>\n                <Flag name={\"us\"} locale={\"en\"} />\n                <Flag name={\"es\"} locale={\"es\"} />\n                <Flag name={\"fr\"} locale={\"fr\"} />\n                <Flag name={\"cn\"} locale={\"zh\"} />\n                <Flag name={\"jp\"} locale={\"jp\"} />\n                <Flag name={\"kr\"} locale={\"ko\"} />\n            </FlexView>\n        </View>\n    );\n};\n\nconst Flag = ({ name, locale }) => {\n    const history = useHistory();\n    const location = useLocation();\n    const onPress = () => {\n        history.push(location.pathname + \"?locale=\" + locale);\n    };\n    return (\n        <TouchableHighlight onPress={onPress} style={{ marginHorizontal: 4 }}>\n            <Image source={FLAGS[name]} style={{ width: 30, height: 20 }} />\n        </TouchableHighlight>\n    );\n};\n\nexport default WebFooter;\n","import React from \"react\";\nimport { View, ViewStyle } from \"react-native\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\nimport Button from \"./Button\";\nimport Text from \"./Text\";\n\nexport interface NoticeProps {\n    text: string;\n    clear?: boolean;\n    color?: string;\n    buttonText?: string;\n    onPressButton?: () => void;\n    style?: ViewStyle;\n}\n\nconst Notice = (props: NoticeProps) => {\n    const { textLight } = useColors();\n    const { border } = useStyles();\n    const borderStyle = border({ color: props.color });\n    const color = props.color || textLight;\n    return (\n        <View style={[props.clear ? {} : borderStyle, props.style]}>\n            <Text note={true} style={{ color, fontSize: IS_DESKTOP ? 13 : 10 }}>\n                {props.text}\n            </Text>\n            {props.buttonText && props.onPressButton && (\n                <Button\n                    title={props.buttonText}\n                    type={\"clear\"}\n                    size={\"small\"}\n                    fontWeight={\"bold\"}\n                    onPress={props.onPressButton}\n                    titleStyle={{ color }}\n                    buttonStyle={{ paddingHorizontal: 0, paddingVertical: 0 }}\n                    style={{ alignSelf: \"flex-end\", marginTop: Spacing.tiny }}\n                />\n            )}\n        </View>\n    );\n};\n\nexport default Notice;\n","import React, { FC, useCallback } from \"react\";\nimport { Platform } from \"react-native\";\nimport { Input as NativeInput, InputProps as NativeInputProps } from \"react-native-elements\";\n\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\n\nexport interface Validation {\n    regexp: RegExp;\n    error: string;\n}\n\nexport interface InputProps extends NativeInputProps {\n    color?: string;\n    size?: \"small\" | \"normal\" | \"large\";\n    allowed?: Validation[];\n    forbidden?: Validation[];\n    onError?: (error: string) => void;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst Input: FC<InputProps> = props => {\n    const { textDark, textMedium, textLight } = useColors();\n    const { border } = useStyles();\n    const size = props.size || \"normal\";\n    const color = props.color || textDark;\n    const fontSize = size === \"small\" ? 16 : size === \"large\" ? 24 : 20;\n    const onChangeText = useCallback(\n        (text: string) => {\n            props.onChangeText?.(text);\n            props.onError?.(\"\");\n            const errors = [] as string[];\n            if (text !== \"\" && props.forbidden) {\n                props.forbidden.forEach(validation => {\n                    if (text.match(validation.regexp)) {\n                        errors.push(validation.error);\n                    }\n                });\n            }\n            if (text !== \"\" && props.allowed) {\n                props.allowed.forEach(validation => {\n                    if (!text.match(validation.regexp)) {\n                        errors.push(validation.error);\n                    }\n                });\n            }\n            if (errors.length > 0) {\n                props.onError?.(errors.join(\"\\n\"));\n            }\n        },\n        [props.onChangeText, props.onError, props.forbidden, props.allowed]\n    );\n    return (\n        <NativeInput\n            {...props}\n            inputStyle={[\n                border(),\n                { fontSize, fontFamily: \"regular\", paddingVertical: 10, color, marginTop: 0, minHeight: 32 },\n                // @ts-ignore\n                Platform.OS === \"web\" ? { outline: \"none\" } : {},\n                props.inputStyle\n            ]}\n            labelStyle={[{ color: textMedium }, props.labelStyle]}\n            placeholderTextColor={props.placeholderTextColor || textLight}\n            errorStyle={props.onError ? { height: 0 } : props.errorStyle}\n            containerStyle={[{ paddingHorizontal: 0 }, props.containerStyle]}\n            onChangeText={onChangeText}\n        />\n    );\n};\n\nexport default Input;\n","module.exports = __webpack_public_path__ + \"static/media/us.d367121f.png\";","module.exports = __webpack_public_path__ + \"static/media/cn.baedda5d.png\";","module.exports = __webpack_public_path__ + \"static/media/kr.146730ea.png\";","module.exports = __webpack_public_path__ + \"static/media/fr.dda60be7.png\";","module.exports = __webpack_public_path__ + \"static/media/es.82844a36.png\";","module.exports = __webpack_public_path__ + \"static/media/jp.27444bf9.png\";","import { useCallback } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport { SUSHI_BAR } from \"../constants/contracts\";\nimport { getContract } from \"../utils\";\nimport { logTransaction } from \"../utils/analytics-utils\";\n\nconst useSushiBar = () => {\n    const enter = useCallback(async (amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const sushiBar = getContract(\"SushiBar\", SUSHI_BAR, signer);\n        const gasLimit = await sushiBar.estimateGas.enter(amount);\n        const tx = await sushiBar.enter(amount, {\n            gasLimit: gasLimit.mul(120).div(100)\n        });\n        return logTransaction(tx, \"SushiBar.enter()\", amount.toString());\n    }, []);\n\n    const leave = useCallback(async (amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const sushiBar = getContract(\"SushiBar\", SUSHI_BAR, signer);\n        const gasLimit = await sushiBar.estimateGas.leave(amount);\n        const tx = await sushiBar.leave(amount, {\n            gasLimit: gasLimit.mul(120).div(100)\n        });\n        return logTransaction(tx, \"SushiBar.leave()\", amount.toString());\n    }, []);\n\n    return {\n        enter,\n        leave\n    };\n};\n\nexport default useSushiBar;\n","import { useCallback, useContext, useEffect, useMemo, useState } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { SUSHI_BAR } from \"../constants/contracts\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport Token from \"../types/Token\";\nimport { getContract, parseBalance } from \"../utils\";\nimport useSushiBar from \"./useSushiBar\";\n\nexport type StakeAction = \"sushi-balance\" | \"stake\";\nexport type UnstakeAction = \"xsushi-balance\" | \"unstake\";\n\nexport interface StakingState {\n    sushi?: Token;\n    xSushi?: Token;\n    sushiStaked?: ethers.BigNumber;\n    sushiSupply?: ethers.BigNumber;\n    xSushiSupply?: ethers.BigNumber;\n    amount: string;\n    setAmount: (amount: string) => void;\n    sushiAllowed: boolean;\n    setSushiAllowed: (allowed: boolean) => void;\n    xSushiAllowed: boolean;\n    setXSushiAllowed: (allowed: boolean) => void;\n    loading: boolean;\n    onEnter: () => Promise<void>;\n    entering: boolean;\n    onLeave: () => Promise<void>;\n    leaving: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useStakingState: () => StakingState = () => {\n    const { signer, address, getTokenAllowance, tokens, updateTokens } = useContext(EthersContext);\n    const { enter, leave } = useSushiBar();\n    const [sushiStaked, setSushiStaked] = useState<ethers.BigNumber>();\n    const [sushiSupply, setSushiSupply] = useState<ethers.BigNumber>();\n    const [xSushiSupply, setXSushiSupply] = useState<ethers.BigNumber>();\n    const [amount, setAmount] = useState(\"\");\n    const [sushiAllowed, setSushiAllowed] = useState(false);\n    const [xSushiAllowed, setXSushiAllowed] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [entering, setEntering] = useState(false);\n    const [leaving, setLeaving] = useState(false);\n\n    const sushi = useMemo(() => tokens.find(token => token.symbol === \"SUSHI\"), [tokens]);\n    const xSushi = useMemo(() => tokens.find(token => token.symbol === \"xSUSHI\"), [tokens]);\n\n    useEffect(() => {\n        setAmount(\"\");\n    }, [address]);\n\n    useAsyncEffect(async () => {\n        if (sushi && xSushi && signer) {\n            setSushiAllowed(false);\n            setXSushiAllowed(false);\n            setLoading(true);\n            try {\n                const minAllowance = ethers.BigNumber.from(2)\n                    .pow(96)\n                    .sub(1);\n                const sushiAllowance = await getTokenAllowance(sushi.address, SUSHI_BAR);\n                setSushiAllowed(ethers.BigNumber.from(sushiAllowance).gte(minAllowance));\n                const xSushiAllowance = await getTokenAllowance(xSushi.address, SUSHI_BAR);\n                setXSushiAllowed(ethers.BigNumber.from(xSushiAllowance).gte(minAllowance));\n\n                const sushiContract = getContract(\"ERC20\", sushi.address, signer);\n                setSushiStaked(await sushiContract.balanceOf(SUSHI_BAR));\n                setSushiSupply(await sushiContract.totalSupply());\n                const xSushiContract = getContract(\"ERC20\", xSushi.address, signer);\n                setXSushiSupply(await xSushiContract.totalSupply());\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [sushi, xSushi, signer]);\n\n    const onEnter = useCallback(async () => {\n        if (amount && sushi && signer) {\n            setEntering(true);\n            try {\n                const parsed = parseBalance(amount, sushi.decimals);\n                const tx = await enter(parsed, signer);\n                if (tx) {\n                    await tx.wait();\n                    await updateTokens();\n                    setAmount(\"\");\n                }\n            } finally {\n                setEntering(false);\n            }\n        }\n    }, [amount, sushi, signer]);\n\n    const onLeave = useCallback(async () => {\n        if (amount && xSushi && signer) {\n            setLeaving(true);\n            try {\n                const parsed = parseBalance(amount, xSushi.decimals);\n                const tx = await leave(parsed, signer);\n                if (tx) {\n                    await tx.wait();\n                    await updateTokens();\n                    setAmount(\"\");\n                }\n            } finally {\n                setLeaving(false);\n            }\n        }\n    }, [amount, xSushi, signer]);\n\n    return {\n        sushi,\n        xSushi,\n        sushiStaked,\n        sushiSupply,\n        xSushiSupply,\n        amount,\n        setAmount,\n        sushiAllowed,\n        setSushiAllowed,\n        xSushiAllowed,\n        setXSushiAllowed,\n        loading,\n        onEnter,\n        entering,\n        onLeave,\n        leaving\n    };\n};\n\nexport default useStakingState;\n","import React, { useContext, useState } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport AmountMeta from \"../components/AmountMeta\";\nimport BackgroundImage from \"../components/BackgroundImage\";\nimport Border from \"../components/Border\";\nimport Button from \"../components/Button\";\nimport ChangeNetwork from \"../components/ChangeNetwork\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport Heading from \"../components/Heading\";\nimport InfoBox from \"../components/InfoBox\";\nimport InsufficientBalanceButton from \"../components/InsufficientBalanceButton\";\nimport Notice from \"../components/Notice\";\nimport Text from \"../components/Text\";\nimport Title from \"../components/Title\";\nimport TokenInput from \"../components/TokenInput\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport { StakingSubMenu } from \"../components/web/WebSubMenu\";\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useStakingState, { StakingState } from \"../hooks/useStakingState\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport { formatBalance, isEmptyValue, parseBalance } from \"../utils\";\nimport Screen from \"./Screen\";\n\nconst UnstakeScreen = () => {\n    const t = useTranslation();\n    return (\n        <Screen>\n            <Container>\n                <BackgroundImage />\n                <Content>\n                    <Title text={t(\"unstake\")} />\n                    <Text light={true}>{t(\"unstake-desc\")}</Text>\n                    <Staking />\n                </Content>\n                {Platform.OS === \"web\" && <WebFooter />}\n            </Container>\n            <StakingSubMenu />\n        </Screen>\n    );\n};\n\nconst Staking = () => {\n    const { chainId } = useContext(EthersContext);\n    if (chainId !== 88) return <ChangeNetwork />;\n    const t = useTranslation();\n    const state = useStakingState();\n    return (\n        <View style={{ marginTop: Spacing.large }}>\n            <XSushiBalance state={state} />\n            <Border />\n            <AmountInput state={state} />\n            {state.xSushi && state.xSushi.balance.isZero() && (\n                <Notice text={t(\"you-dont-have-xsushi\")} color={\"orange\"} style={{ marginTop: Spacing.small }} />\n            )}\n            <UnstakeInfo state={state} />\n        </View>\n    );\n};\n\nconst XSushiBalance = ({ state }: { state: StakingState }) => {\n    const t = useTranslation();\n    return (\n        <View>\n            <Heading text={t(\"your-xsushi\")} />\n            <AmountMeta\n                amount={state.xSushi ? formatBalance(state.xSushi.balance, state.xSushi.decimals) : \"\"}\n                suffix={\"xSUSHI\"}\n            />\n        </View>\n    );\n};\n\nconst AmountInput = ({ state }: { state: StakingState }) => {\n    const t = useTranslation();\n    if (!state.xSushi || state.xSushi.balance.isZero()) {\n        return <Heading text={t(\"amount-to-unstake\")} disabled={true} />;\n    }\n    return (\n        <View>\n            <Heading text={t(\"amount-to-unstake\")} />\n            <TokenInput\n                token={state.xSushi}\n                amount={state.amount}\n                onAmountChanged={state.setAmount}\n                autoFocus={IS_DESKTOP}\n            />\n        </View>\n    );\n};\n\nconst UnstakeInfo = ({ state }: { state: StakingState }) => {\n    const disabled =\n        !state.sushi || !state.xSushi || !state.sushiStaked || !state.xSushiSupply || isEmptyValue(state.amount);\n    const sushiAmount = disabled\n        ? undefined\n        : parseBalance(state.amount, state.xSushi!.decimals)\n              .mul(state.sushiStaked!)\n              .div(state.xSushiSupply!);\n    return (\n        <InfoBox>\n            <AmountMeta\n                amount={sushiAmount ? formatBalance(sushiAmount, state.sushi!.decimals, 8) : \"\"}\n                suffix={\"SUSHI\"}\n                disabled={disabled}\n            />\n            <Controls state={state} />\n        </InfoBox>\n    );\n};\n\nconst Controls = ({ state }: { state: StakingState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    return (\n        <View style={{ marginTop: Spacing.normal }}>\n            {!state.xSushi || state.xSushi.balance.isZero() || isEmptyValue(state.amount) ? (\n                <UnstakeButton state={state} onError={setError} disabled={true} />\n            ) : parseBalance(state.amount, state.xSushi.decimals).gt(state.xSushi.balance) ? (\n                <InsufficientBalanceButton symbol={state.xSushi.symbol} />\n            ) : state.loading ? (\n                <FetchingButton />\n            ) : (\n                <UnstakeButton state={state} onError={setError} disabled={false} />\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </View>\n    );\n};\n\nconst UnstakeButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: StakingState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const t = useTranslation();\n    const onPress = async () => {\n        onError({});\n        try {\n            await state.onLeave();\n            state.setAmount(\"\");\n        } catch (e) {\n            onError(e);\n        }\n    };\n    return <Button title={t(\"unstake\")} loading={state.leaving} onPress={onPress} disabled={disabled} />;\n};\n\nexport default UnstakeScreen;\n"],"sourceRoot":""}