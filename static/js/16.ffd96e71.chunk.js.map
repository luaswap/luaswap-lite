{"version":3,"sources":["src/components/SwapContainer.tsx","src/components/svg/SvgBackgroundTradeInfo.tsx","src/hooks/useSwapState.tsx","src/components/Space.tsx","src/screens/SwapScreen.tsx"],"names":["Content","props","useContext","GlobalContext","darkMode","style","width","IS_DESKTOP","marginLeft","marginRight","padding","Spacing","normal","BackgroundTradeInfoDark","View","position","aspectRatio","bottom","left","right","height","viewBox","fill","xmlns","id","maskUnits","x","y","fillRule","clipRule","d","mask","useSwapState","state","useTokenPairState","EthersContext","chainId","signer","provider","updateTokens","getTrade","useSDK","useSwapRouter","swap","calculateSwapFee","useSettlement","calculateLimitOrderFee","calculateLimitOrderReturn","createOrder","useState","loading","setLoading","orderType","setOrderType","trade","setTrade","unsupported","setUnsupported","swapFee","setSwapFee","limitOrderPrice","setLimitOrderPrice","limitOrderFee","setLimitOrderFee","limitOrderSwapFee","setLimitOrderSwapFee","limitOrderReturn","setLimitOrderReturn","swapping","setSwapping","creatingOrder","setCreatingOrder","trc21Fee","setTrc21Fee","useEffect","setFromSymbol","useDelayedEffect","isEmptyValue","fromAmount","undefined","useDelayedOnBlockEffect","block","a","async","fromToken","toToken","amount","parseBalance","decimals","isZero","TOMOCHAIN_MAINET_PROVIDER","fromSymbol","toSymbol","useAsyncEffect","formatBalance","sub","currencyAContract","getContract","address","minFee","fee","onSwap","useCallback","result","tx","wait","onCreateOrder","amountIn","Fraction","parse","apply","mul","pow10","div","limitOrderUnsupported","isNativeToken","Border","marginTop","small","tiny","styles","StyleSheet","create","container","flex","alignItems","justifyContent","backgroundImage","link","color","textAlign","hover","textDecorationLine","Swap","useColors","backgroundLight","border","backgroundLightBox","ChangeNetwork","FlexView","flexDirection","borderRadius","backgroundColor","zIndex","minHeight","marginHorizontal","Space","offsetTop","offsetBottom","maxHeight","OrderTypeSelect","t","useTranslation","options","key","title","description","Select","option","find","setOption","FromTokenSelect","tokens","customTokens","Heading","text","disabled","ETH","token","TokenSelect","symbol","onChangeSymbol","hidden","tk","balance","ToTokenSelect","limit","setToSymbol","AmountInput","TokenInput","onAmountChanged","setFromAmount","autoFocus","PriceInput","marketPrice","executionPrice","toFixed","ethers","constants","Zero","maxButtonText","LimitOrderUnsupportedNotice","textLight","onConvert","useLinker","top","maxWidth","hovered","Button","type","size","titleStyle","onPress","containerStyle","overflow","buttonStyle","paddingHorizontal","paddingVertical","NoPairNotice","Notice","TradeInfo","isNativeAndWrappedNativePair","InfoBox","WrapInfo","Text","fontSize","marginBottom","SwapInfo","outputAmount","price","impact","priceImpact","AmountMeta","suffix","Meta","label","SwapControls","error","setError","approveRequired","fromTokenAllowed","gt","InsufficientBalanceButton","isWrappedNativeToken","onError","UnsupportedButton","FetchingButton","ApproveButton","spender","ROUTER","onSuccess","setFromTokenAllowed","message","code","ErrorMessage","SwapButton","catch","WrapButton","onWrap","wrapping","UnwrapButton","onUnwrap","unwrapping","LimitOrderInfo","fontWeight","LimitOrderControls","allowed","setAllowed","erc20","allowance","SETTLEMENT","BigNumber","from","gte","PriceTooLowButton","PlaceOrderButton","goToLimitOrders","SwapScreen","Screen","Container","BackgroundImage","light","SwapContainer"],"mappings":"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","file":"static/js/16.ffd96e71.chunk.js","sourcesContent":["import React, { useContext } from \"react\";\nimport { View, ViewProps } from \"react-native\";\n\nimport { DESKTOP_CONTENT_WIDTH, IS_DESKTOP, SCREEN_WIDTH, Spacing, SUB_MENU_HEIGHT } from \"../constants/dimension\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\n// import useStyles from \"../hooks/useStyles\";\n\nconst Content: React.FunctionComponent<ViewProps> = props => {\n    const { darkMode } = useContext(GlobalContext);\n    // const { borderDark: borderColor, background } = useColors();\n    // const { border, shadow } = useStyles();\n    return (\n        <View\n            {...props}\n            style={[\n                {\n                    // backgroundColor: background,\n                    // flexDirection: \"row\",\n                    width: IS_DESKTOP ? 1200 : \"100%\",//SCREEN_WIDTH - Spacing.large,\n                    marginLeft: \"auto\",\n                    marginRight: \"auto\",\n                    // marginTop: Spacing.huge + SUB_MENU_HEIGHT,\n                    // marginBottom: Spacing.large,\n                    padding: IS_DESKTOP ? Spacing.normal : 10\n                },\n                props.style\n            ]}\n        />\n    );\n};\nexport default Content;\n","import * as React from \"react\";\nimport { View } from \"react-native\";\n// tslint:disable-next-line:max-func-body-length\n\nfunction BackgroundTradeInfoDark() {\n    return (\n        <View\n            style={{\n                position: \"absolute\",\n                width: \"100%\",\n                aspectRatio: 1,\n                bottom: -35,\n                left: 0,\n                right: 0,\n                marginLeft: -2\n                // backgroundColor: background\n            }}>\n            <svg width=\"100.6%\" height=\"76\" viewBox=\"0 0 508 76\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <mask id=\"path-1-outside-1\" maskUnits=\"userSpaceOnUse\" x=\"0\" y=\"0\" width=\"508\" height=\"76\" fill=\"black\">\n                    <rect fill=\"white\" width=\"508\" height=\"76\" />\n                    <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M2 2H506V50C506 61.8932 497.349 71.7658 485.997 73.6687C485.82 64.9851 478.726 58 470 58C461.163 58 454 65.1634 454 74H438C438 65.1634 430.837 58 422 58C413.163 58 406 65.1634 406 74H390C390 65.1634 382.837 58 374 58C365.163 58 358 65.1634 358 74H342C342 65.1634 334.837 58 326 58C317.163 58 310 65.1634 310 74H294C294 65.1634 286.837 58 278 58C269.163 58 262 65.1634 262 74H246C246 65.1634 238.837 58 230 58C221.163 58 214 65.1634 214 74H198C198 65.1634 190.837 58 182 58C173.163 58 166 65.1634 166 74H150C150 65.1634 142.837 58 134 58C125.163 58 118 65.1634 118 74H102C102 65.1634 94.8366 58 86 58C77.1634 58 70 65.1634 70 74H54C54 65.1634 46.8366 58 38 58C29.2741 58 22.1797 64.9851 22.0034 73.6687C10.6509 71.7658 2 61.8932 2 50V2Z\" />\n                </mask>\n                <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M2 2H506V50C506 61.8932 497.349 71.7658 485.997 73.6687C485.82 64.9851 478.726 58 470 58C461.163 58 454 65.1634 454 74H438C438 65.1634 430.837 58 422 58C413.163 58 406 65.1634 406 74H390C390 65.1634 382.837 58 374 58C365.163 58 358 65.1634 358 74H342C342 65.1634 334.837 58 326 58C317.163 58 310 65.1634 310 74H294C294 65.1634 286.837 58 278 58C269.163 58 262 65.1634 262 74H246C246 65.1634 238.837 58 230 58C221.163 58 214 65.1634 214 74H198C198 65.1634 190.837 58 182 58C173.163 58 166 65.1634 166 74H150C150 65.1634 142.837 58 134 58C125.163 58 118 65.1634 118 74H102C102 65.1634 94.8366 58 86 58C77.1634 58 70 65.1634 70 74H54C54 65.1634 46.8366 58 38 58C29.2741 58 22.1797 64.9851 22.0034 73.6687C10.6509 71.7658 2 61.8932 2 50V2Z\" fill=\"#353535\" />\n                <path d=\"M506 2H507.5V0.5H506V2ZM2 2V0.5H0.5V2H2ZM485.997 73.6687L484.497 73.6992L484.532 75.4351L486.245 75.1481L485.997 73.6687ZM454 74V75.5H455.5V74H454ZM438 74H436.5V75.5H438V74ZM406 74V75.5H407.5V74H406ZM390 74H388.5V75.5H390V74ZM358 74V75.5H359.5V74H358ZM342 74H340.5V75.5H342V74ZM310 74V75.5H311.5V74H310ZM294 74H292.5V75.5H294V74ZM262 74V75.5H263.5V74H262ZM246 74H244.5V75.5H246V74ZM214 74V75.5H215.5V74H214ZM198 74H196.5V75.5H198V74ZM166 74V75.5H167.5V74H166ZM150 74H148.5V75.5H150V74ZM118 74V75.5H119.5V74H118ZM102 74H100.5V75.5H102V74ZM70 74V75.5H71.5V74H70ZM54 74H52.5V75.5H54V74ZM22.0034 73.6687L21.7554 75.1481L23.4678 75.4351L23.5031 73.6992L22.0034 73.6687ZM506 0.5H2V3.5H506V0.5ZM507.5 50V2H504.5V50H507.5ZM486.245 75.1481C498.308 73.126 507.5 62.638 507.5 50H504.5C504.5 61.1483 496.391 70.4056 485.749 72.1894L486.245 75.1481ZM470 59.5C477.908 59.5 484.337 65.8303 484.497 73.6992L487.496 73.6383C487.303 64.1399 479.544 56.5 470 56.5V59.5ZM455.5 74C455.5 65.9919 461.992 59.5 470 59.5V56.5C460.335 56.5 452.5 64.335 452.5 74H455.5ZM438 75.5H454V72.5H438V75.5ZM422 59.5C430.008 59.5 436.5 65.9919 436.5 74H439.5C439.5 64.335 431.665 56.5 422 56.5V59.5ZM407.5 74C407.5 65.9919 413.992 59.5 422 59.5V56.5C412.335 56.5 404.5 64.335 404.5 74H407.5ZM390 75.5H406V72.5H390V75.5ZM374 59.5C382.008 59.5 388.5 65.9919 388.5 74H391.5C391.5 64.335 383.665 56.5 374 56.5V59.5ZM359.5 74C359.5 65.9919 365.992 59.5 374 59.5V56.5C364.335 56.5 356.5 64.335 356.5 74H359.5ZM342 75.5H358V72.5H342V75.5ZM326 59.5C334.008 59.5 340.5 65.9919 340.5 74H343.5C343.5 64.335 335.665 56.5 326 56.5V59.5ZM311.5 74C311.5 65.9919 317.992 59.5 326 59.5V56.5C316.335 56.5 308.5 64.335 308.5 74H311.5ZM294 75.5H310V72.5H294V75.5ZM278 59.5C286.008 59.5 292.5 65.9919 292.5 74H295.5C295.5 64.335 287.665 56.5 278 56.5V59.5ZM263.5 74C263.5 65.9919 269.992 59.5 278 59.5V56.5C268.335 56.5 260.5 64.335 260.5 74H263.5ZM246 75.5H262V72.5H246V75.5ZM230 59.5C238.008 59.5 244.5 65.9919 244.5 74H247.5C247.5 64.335 239.665 56.5 230 56.5V59.5ZM215.5 74C215.5 65.9919 221.992 59.5 230 59.5V56.5C220.335 56.5 212.5 64.335 212.5 74H215.5ZM198 75.5H214V72.5H198V75.5ZM182 59.5C190.008 59.5 196.5 65.9919 196.5 74H199.5C199.5 64.335 191.665 56.5 182 56.5V59.5ZM167.5 74C167.5 65.9919 173.992 59.5 182 59.5V56.5C172.335 56.5 164.5 64.335 164.5 74H167.5ZM150 75.5H166V72.5H150V75.5ZM134 59.5C142.008 59.5 148.5 65.9919 148.5 74H151.5C151.5 64.335 143.665 56.5 134 56.5V59.5ZM119.5 74C119.5 65.9919 125.992 59.5 134 59.5V56.5C124.335 56.5 116.5 64.335 116.5 74H119.5ZM102 75.5H118V72.5H102V75.5ZM86 59.5C94.0081 59.5 100.5 65.9919 100.5 74H103.5C103.5 64.335 95.665 56.5 86 56.5V59.5ZM71.5 74C71.5 65.9919 77.9919 59.5 86 59.5V56.5C76.335 56.5 68.5 64.335 68.5 74H71.5ZM54 75.5H70V72.5H54V75.5ZM38 59.5C46.0081 59.5 52.5 65.9919 52.5 74H55.5C55.5 64.335 47.665 56.5 38 56.5V59.5ZM23.5031 73.6992C23.6629 65.8303 30.0924 59.5 38 59.5V56.5C28.4559 56.5 20.6966 64.1399 20.5037 73.6383L23.5031 73.6992ZM0.5 50C0.5 62.638 9.69221 73.126 21.7554 75.1481L22.2513 72.1894C11.6095 70.4056 3.5 61.1483 3.5 50H0.5ZM0.5 2V50H3.5V2H0.5Z\" fill=\"#606060\" mask=\"url(#path-1-outside-1)\" />\n            </svg>\n\n        </View>\n    );\n}\n\nexport default BackgroundTradeInfoDark;\n","import { useCallback, useContext, useEffect, useState } from \"react\";\n\nimport { Trade } from \"@luaswap/sdk\";\nimport useAsyncEffect from \"use-async-effect\";\nimport Fraction from \"../constants/Fraction\";\nimport { TOMOCHAIN_MAINET_PROVIDER, EthersContext } from \"../context/EthersContext\";\nimport { getContract, formatBalance, isEmptyValue, isNativeToken, parseBalance, pow10 } from \"../utils\";\nimport useDelayedEffect from \"./useDelayedEffect\";\nimport useDelayedOnBlockEffect from \"./useDelayedOnBlockEffect\";\nimport useSDK from \"./useSDK\";\nimport useSettlement from \"./useSettlement\";\nimport useSwapRouter from \"./useSwapRouter\";\nimport useTokenPairState, { TokenPairState } from \"./useTokenPairState\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\n\nexport type OrderType = \"market\" | \"limit\";\n\nexport interface SwapState extends TokenPairState {\n    orderType?: OrderType;\n    setOrderType: (orderType?: OrderType) => void;\n    trade?: Trade;\n    unsupported: boolean;\n    limitOrderUnsupported: boolean;\n    limitOrderPrice: string;\n    setLimitOrderPrice: (price: string) => void;\n    swapFee: string;\n    limitOrderFee: string;\n    limitOrderSwapFee: string;\n    limitOrderReturn: string;\n    onSwap: () => Promise<void>;\n    swapping: boolean;\n    onCreateOrder: () => Promise<void>;\n    creatingOrder: boolean;\n    trc21Fee?: BigNumber\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useSwapState: () => SwapState = () => {\n    const state = useTokenPairState();\n    const { chainId, provider, signer, updateTokens } = useContext(EthersContext);\n    const { getTrade } = useSDK();\n    const { swap, calculateSwapFee } = useSwapRouter();\n    const { calculateLimitOrderFee, calculateLimitOrderReturn } = useSettlement();\n    const { createOrder } = useSettlement();\n    const [loading, setLoading] = useState(true);\n    const [orderType, setOrderType] = useState<OrderType>();\n    const [trade, setTrade] = useState<Trade>();\n    const [unsupported, setUnsupported] = useState(false);\n    const [swapFee, setSwapFee] = useState(\"\");\n    const [limitOrderPrice, setLimitOrderPrice] = useState<string>(\"\");\n    const [limitOrderFee, setLimitOrderFee] = useState(\"\");\n    const [limitOrderSwapFee, setLimitOrderSwapFee] = useState(\"\");\n    const [limitOrderReturn, setLimitOrderReturn] = useState(\"\");\n    const [swapping, setSwapping] = useState(false);\n    const [creatingOrder, setCreatingOrder] = useState(false);\n    const [trc21Fee, setTrc21Fee] = useState();\n\n    useEffect(() => {\n        if (!orderType) {\n            state.setFromSymbol(\"\");\n        }\n        setLimitOrderPrice(\"\");\n    }, [orderType]);\n\n    useDelayedEffect(\n        () => {\n            if (isEmptyValue(state.fromAmount)) {\n                setLimitOrderPrice(\"\");\n                setTrade(undefined);\n            }\n        },\n        300,\n        [state.fromAmount]\n    );\n\n    useDelayedOnBlockEffect(\n        async block => {\n            if (!block) {\n                setLoading(true);\n            }\n            // const p = getProvider();\n            if (state.fromToken && state.toToken && state.fromAmount) {\n                const amount = parseBalance(state.fromAmount, state.fromToken.decimals);\n                if (!amount.isZero()) {\n                    setUnsupported(false);\n                    try {\n                        setTrade(await getTrade(state.fromToken, state.toToken, amount, TOMOCHAIN_MAINET_PROVIDER));\n                    } catch (e) {\n                        setUnsupported(true);\n                    } finally {\n                        setLoading(false);\n                    }\n                }\n            }\n        },\n        () => \"getTrade(\" + state.fromSymbol + \",\" + state.toSymbol + \",\" + state.fromAmount + \")\",\n        [chainId, state.fromToken, state.toToken, state.fromAmount]\n    );\n\n    useAsyncEffect(() => {\n        if (trade && !isEmptyValue(state.fromAmount)) {\n            const fromAmount = parseBalance(state.fromAmount, state.fromToken!.decimals);\n            setSwapFee(formatBalance(calculateSwapFee(fromAmount), state.fromToken!.decimals, 8));\n            if (orderType === \"limit\") {\n                setLimitOrderFee(formatBalance(calculateLimitOrderFee(fromAmount), state.fromToken!.decimals, 8));\n                setLimitOrderSwapFee(\n                    formatBalance(\n                        calculateSwapFee(fromAmount.sub(calculateLimitOrderFee(fromAmount))),\n                        state.fromToken!.decimals,\n                        8\n                    )\n                );\n            }\n        }\n    }, [orderType, trade, state.fromAmount]);\n\n    useAsyncEffect(() => {\n        if (state.fromToken && state.toToken && !isEmptyValue(state.fromAmount) && !isEmptyValue(limitOrderPrice)) {\n            setLimitOrderReturn(\n                formatBalance(\n                    calculateLimitOrderReturn(\n                        state.fromToken,\n                        state.toToken,\n                        parseBalance(state.fromAmount, state.fromToken.decimals),\n                        limitOrderPrice\n                    ),\n                    state.toToken.decimals\n                )\n            );\n        }\n    }, [state.fromToken, state.toToken, state.fromAmount, limitOrderPrice]);\n\n    useAsyncEffect(\n        async () => {\n            if (state.fromToken) {\n                const currencyAContract = getContract(\"TRC21\", state.fromToken.address, TOMOCHAIN_MAINET_PROVIDER)\n                try {\n                    const fee = await currencyAContract.minFee()\n                    setTrc21Fee(fee)\n                }\n                catch (error) {\n                    setTrc21Fee(undefined)\n                }\n            }\n        },\n        [state.fromToken]\n    );\n\n    const onSwap = useCallback(async () => {\n        if (state.fromToken && state.toToken && state.fromAmount && signer && trade) {\n            setSwapping(true);\n            try {\n                const result = await swap(trade, signer);\n                if (result) {\n                    await result.tx.wait();\n                    await updateTokens();\n                    setTrade(undefined);\n                    setOrderType(undefined);\n                }\n            } finally {\n                setSwapping(false);\n            }\n        }\n    }, [state.fromToken, state.toToken, state.fromAmount, signer, trade]);\n\n    const onCreateOrder = useCallback(async () => {\n        if (state.fromToken && state.toToken && state.fromAmount && !isEmptyValue(limitOrderPrice) && signer) {\n            setCreatingOrder(true);\n            try {\n                const amountIn = parseBalance(state.fromAmount, state.fromToken.decimals);\n                const tx = await createOrder(\n                    state.fromToken,\n                    state.toToken,\n                    amountIn,\n                    Fraction.parse(limitOrderPrice)\n                        .apply(amountIn)\n                        .mul(pow10(state.toToken.decimals))\n                        .div(pow10(state.fromToken.decimals)),\n                    signer\n                );\n                await tx.wait();\n                setTrade(undefined);\n                setOrderType(undefined);\n            } finally {\n                setCreatingOrder(false);\n            }\n        }\n    }, [chainId, state.fromToken, state.toToken, state.fromAmount, signer, limitOrderPrice]);\n\n    return {\n        ...state,\n        loading: loading || state.loading,\n        orderType,\n        setOrderType,\n        trade,\n        unsupported,\n        swapFee,\n        limitOrderPrice,\n        setLimitOrderPrice,\n        limitOrderFee,\n        limitOrderSwapFee,\n        limitOrderReturn,\n        onSwap,\n        swapping,\n        limitOrderUnsupported: orderType === \"limit\" && (isNativeToken(state.fromToken) || isNativeToken(state.toToken)),\n        onCreateOrder,\n        creatingOrder,\n        trc21Fee\n    };\n};\n\nexport default useSwapState;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\n\nconst Border = props => {\n    return (\n        <View\n            style={{\n                height: 1,\n                width: \"100%\",\n                marginTop: props.small ? Spacing.tiny : Spacing.small\n            }}\n        />\n    );\n};\n\nexport default Border;\n","import React, { useCallback, useContext, useState } from \"react\";\nimport { StyleSheet, Platform, View, Linking } from \"react-native\";\nimport { Divider } from 'react-native-elements';\nimport StickyBox from \"react-sticky-box\";\n\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport AmountMeta from \"../components/AmountMeta\";\nimport ApproveButton from \"../components/ApproveButton\";\nimport BackgroundImage from \"../components/BackgroundImage\";\nimport BackgroundTradeInfo from \"../components/svg/SvgBackgroundTradeInfo\";\nimport Border from \"../components/Border\";\nimport Button from \"../components/Button\";\nimport ChangeNetwork from \"../components/ChangeNetwork\";\nimport Container from \"../components/Container\";\n// import Content from \"../components/Content\";\nimport SwapContainer from \"../components/SwapContainer\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport Heading from \"../components/Heading\";\nimport InfoBox from \"../components/InfoBox\";\nimport InsufficientBalanceButton from \"../components/InsufficientBalanceButton\";\nimport Meta from \"../components/Meta\";\nimport Notice from \"../components/Notice\";\nimport Select, { Option } from \"../components/Select\";\nimport Text from \"../components/Text\";\n// import Title from \"../components/Title\";\nimport TokenInput from \"../components/TokenInput\";\nimport TokenSelect from \"../components/TokenSelect\";\nimport UnsupportedButton from \"../components/UnsupportedButton\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport { SwapSubMenu } from \"../components/web/WebSubMenu\";\nimport { ROUTER, SETTLEMENT } from \"../constants/contracts\";\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport Fraction from \"../constants/Fraction\";\nimport { ALCHEMY_PROVIDER, TOMOCHAIN_MAINET_PROVIDER, EthersContext } from \"../context/EthersContext\";\nimport useColors from \"../hooks/useColors\";\nimport useDelayedEffect from \"../hooks/useDelayedEffect\";\nimport useLinker from \"../hooks/useLinker\";\nimport useSwapState, { OrderType, SwapState } from \"../hooks/useSwapState\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport Token from \"../types/Token\";\nimport { getContract, isEmptyValue, isNativeToken, isNativeAndWrappedNativePair, isWrappedNativeToken, parseBalance } from \"../utils\";\nimport Screen from \"./Screen\";\nimport FlexView from \"../components/FlexView\";\nimport Space from \"../components/Space\";\nimport { Link, NavLink } from \"react-router-dom\";\nimport { Hoverable } from \"react-native-web-hover\";\n// import Slider from \"../components/Slider\";\n\n\nconst SwapScreen = () => {\n    const t = useTranslation();\n    return (\n        <Screen>\n            <SwapSubMenu />\n            <Container>\n                <BackgroundImage />\n                <Text style={{ marginBottom: 40, textAlign: \"center\" }} light={true}>{t(\"new-order-desc\")}</Text>\n                <SwapContainer>\n                    <Swap />\n                </SwapContainer>\n            </Container>\n        </Screen>\n    );\n};\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        marginLeft: 10,\n        marginRight: 10,\n        alignItems: \"stretch\",\n        justifyContent: \"center\"\n    },\n    backgroundImage: {\n        width: '100%'\n    },\n    link: {\n        color: \"#aaa\",\n        textAlign: \"left\"\n    },\n    hover: {\n        textDecorationLine: \"underline\"\n    }\n\n});\n\nconst Swap = () => {\n    const { chainId } = useContext(EthersContext);\n    const { border, backgroundLight, backgroundLightBox } = useColors()\n    if (chainId !== 88) return <ChangeNetwork />;\n    const state = useSwapState();\n    return (\n        <View>\n            <FlexView style={{ flexDirection: IS_DESKTOP ? 'row' : 'column' }}>\n                <View style={{\n                    flex: IS_DESKTOP ? 4 : 1,\n                    padding: IS_DESKTOP ? 30 : 10,\n                    borderRadius: 20,\n                    backgroundColor: backgroundLight,\n                    zIndex: 1,\n                    minHeight: \"auto\"\n                }}>\n\n                    <OrderTypeSelect state={state} />\n                    <View style={{\n                        backgroundColor: IS_DESKTOP ? backgroundLightBox : \"transparent\",\n                        padding: IS_DESKTOP ? 20 : 0,\n                        borderRadius: 15,\n                        marginHorizontal: IS_DESKTOP ? 10 : 0\n                    }}>\n                        <FromTokenSelect state={state} />\n                        <Space />\n                        <ToTokenSelect state={state} />\n                        <Space />\n                        <AmountInput state={state} />\n                        {state.orderType === \"limit\" && (\n                            <View style={{ marginTop: Spacing.small }}>\n                                <PriceInput state={state} />\n                            </View>\n                        )}\n                        {!state.loading && !state.trade && <NoPairNotice state={state} />}\n                    </View>\n                </View>\n                <StickyBox offsetTop={0} offsetBottom={20} style={{ maxHeight: 350, flex: IS_DESKTOP ? 3 : 1, marginLeft: IS_DESKTOP ? 20 : 0, marginTop: IS_DESKTOP ? 0 : 30 }}>\n                    <View>\n                        <TradeInfo state={state} />\n                    </View>\n                </StickyBox>\n            </FlexView>\n        </View>\n    );\n};\n\nconst OrderTypeSelect = ({ state }: { state: SwapState }) => {\n    const t = useTranslation();\n    const options: Option[] = [\n        { key: \"market\", title: t(\"market-order\"), description: t(\"market-order-desc\") },\n        { key: \"limit\", title: t(\"limit-order\"), description: t(\"limit-order-desc\") }\n    ];\n    return (\n        <>\n            <Select\n                title={t(\"order-type\")}\n                options={options}\n                option={options.find(option => option.key === state.orderType)}\n                setOption={option => state.setOrderType(option?.key as OrderType | undefined)}\n            />\n        </>\n    );\n};\n\nconst FromTokenSelect = ({ state }: { state: SwapState }) => {\n    const t = useTranslation();\n    const { tokens, customTokens } = useContext(EthersContext);\n    if (!state.orderType) {\n        return <Heading text={t(\"token-to-sell\")} disabled={true} />;\n    }\n    const ETH = tokens ? tokens.find(token => isNativeToken(token)) : null;\n    return (\n        <View style={{ zIndex: 1 }}>\n            <TokenSelect\n                title={t(\"token-to-sell\")}\n                symbol={state.fromSymbol}\n                onChangeSymbol={state.setFromSymbol}\n                hidden={token =>\n                    (!customTokens.find(tk => tk.address === token.address) && token.balance.isZero()) ||\n                    (state.orderType === \"limit\" && isNativeToken(token))\n                }\n            />\n            {state.orderType === \"limit\" && !state.fromSymbol && ETH && !ETH.balance.isZero() && (\n                <LimitOrderUnsupportedNotice />\n            )}\n        </View>\n    );\n};\n\nconst ToTokenSelect = ({ state }: { state: SwapState }) => {\n    const t = useTranslation();\n    if (!state.orderType || !state.fromSymbol) {\n        return <Heading text={t(\"token-to-buy\")} disabled={true} />;\n    }\n    const limit = state.orderType === \"limit\";\n    const onChangeSymbol = (symbol: string) => {\n        state.setToSymbol(limit && symbol === \"TOMO\" ? \"WTOMO\" : symbol);\n    };\n    return (\n        <View style={{ zIndex: 10 }}>\n            <TokenSelect\n                title={t(\"token-to-buy\")}\n                symbol={state.toSymbol}\n                onChangeSymbol={onChangeSymbol}\n                hidden={token => token.symbol === state.fromSymbol || (limit && isNativeToken(token))}\n            />\n            {state.orderType === \"limit\" && !state.toSymbol && <LimitOrderUnsupportedNotice />}\n        </View>\n    );\n};\n\nconst AmountInput = ({ state }: { state: SwapState }) => {\n    const t = useTranslation();\n    if (!state.fromSymbol || !state.toSymbol) {\n        return <Heading text={t(\"amount\")} disabled={true} />;\n    }\n    return (\n        <View>\n            <Heading text={state.fromSymbol + \" \" + t(\"amount\")} />\n            <TokenInput\n                token={state.fromToken}\n                amount={state.fromAmount}\n                onAmountChanged={state.setFromAmount}\n                autoFocus={IS_DESKTOP}\n                trc21Fee={state.trc21Fee}\n            />\n        </View>\n    );\n};\n\nconst PriceInput = ({ state }: { state: SwapState }) => {\n    const t = useTranslation();\n    if (!state.fromSymbol || !state.toSymbol) {\n        return <Heading text={t(\"minimum-price\")} disabled={true} />;\n    }\n    const marketPrice =\n        state.toToken && state.trade\n            ? parseBalance(state.trade.executionPrice.toFixed(state.toToken.decimals), state.toToken.decimals)\n            : ethers.constants.Zero;\n    return (\n        <TokenInput\n            title={t(\"minimum-price\") + \" (\" + state.fromSymbol + \"/\" + state.toSymbol + \")\"}\n            token={\n                {\n                    ...state.toToken,\n                    balance: marketPrice\n                } as Token\n            }\n            amount={state.limitOrderPrice}\n            onAmountChanged={state.setLimitOrderPrice}\n            maxButtonText={t(\"-market-\")}\n        />\n    );\n};\n\nconst LimitOrderUnsupportedNotice = () => {\n    const { textLight } = useColors();\n    const t = useTranslation();\n    const onConvert = useLinker(\"https://app.luaswap.org/#/swap?outputCurrency=0xB1f66997A5760428D3a87D68b90BfE0aE64121cC\", \"\", \"_blank\");\n    return (\n        <Hoverable style={{\n            position: \"absolute\",\n            padding: 5,\n            borderRadius: 5,\n            right: 10,\n            top: -10,\n            maxWidth: IS_DESKTOP ? 270 : 168,\n            backgroundColor: \"#353535\"\n        }}>\n            {hovered =>\n                <Button\n                    title={t(\"eth-not-supported-for-limit-orders\")}\n                    type={\"clear\"}\n                    size={\"small\"}\n                    titleStyle={[styles.link, hovered && styles.hover]}\n                    onPress={onConvert}\n                    containerStyle={{ overflow: \"visible\" }}\n                    buttonStyle={{ paddingHorizontal: 0, paddingVertical: 0 }}\n                />\n            }\n        </Hoverable>\n        // <Hoverable style={{\n        //     position: \"absolute\",\n        //     padding: 5,\n        //     borderRadius: 5,\n        //     right: 10,\n        //     top: -10,\n        //     maxWidth: IS_DESKTOP ? 270 : 168,\n        //     backgroundColor: \"#353535\"\n        // }}>\n        //     {hover =>\n        //         <Link\n        //             to={onConvert}\n        //             target=\"blank\"\n        //             style={{\n        //                 color: textLight,\n        //                 fontFamily: \"apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Helvetica, Arial, sans-serif\",\n        //                 fontSize: 13,\n        //                 textDecorationLine: hover ? \"underline\" : \"none\"\n        //             }}>\n        //             {t(\"eth-not-supported-for-limit-orders\")}\n        //         </Link>\n        //     }\n        // </Hoverable>\n        // <Notice\n        //     text={t(\"eth-not-supported-for-limit-orders\")}\n        //     color={textLight}\n        //     clear={true}\n        //     buttonText={\"Convert\"}\n        //     onPressButton={onConvert}\n        //     style={{\n        //         position: \"absolute\",\n        //         padding: 5,\n        //         borderRadius: 5,\n        //         right: 10,\n        //         top: -10,\n        //         maxWidth: IS_DESKTOP ? 270 : 168,\n        //         backgroundColor: \"#353535\",\n        //         // marginVertical: Spacing.small,\n        //         // marginHorizontal: Spacing.tiny \n        //     }}\n        // />\n    );\n};\n\nconst NoPairNotice = ({ state }: { state: SwapState }) => {\n    const t = useTranslation();\n    return (\n        <Notice\n            text={t(\"pair-not-created\", { fromSymbol: state.fromSymbol, toSymbol: state.toSymbol })}\n            color={\"#FABC46\"}\n            style={{ marginTop: Spacing.normal }}\n        />\n    );\n};\n\nconst TradeInfo = ({ state }: { state: SwapState }) => {\n    /* const { chainId } = useContext(EthersContext); */\n    // const source = require(\"../../assets/Subtract.png\")\n    const t = useTranslation()\n    if (isNativeAndWrappedNativePair(state.fromToken, state.toToken)) return <WrapInfo state={state} />\n    const disabled =\n        state.fromSymbol === \"\" ||\n        state.toSymbol === \"\" ||\n        isEmptyValue(state.fromAmount) ||\n        (state.orderType === \"limit\" && isNativeToken(state.fromToken)) ||\n        (!state.loading && !state.trade);\n    // const onGetKeth = useLinker(\"https://faucet.kovan.network/\", \"\", \"_blank\");\n    return (\n\n        <InfoBox style={{ minHeight: \"auto\" }}>\n            {/* <ImageBackground source={source} style={styles.backgroundImage}> */}\n            <BackgroundTradeInfo />\n            <Divider style={{ backgroundColor: \"#353535\", height: 7, position: \"absolute\", width: \"100%\", left: 0, bottom: 32 }} />\n            {state.orderType === \"limit\" ? (\n                <>\n                    <LimitOrderInfo state={state} />\n                    {/* {chainId === 42 && (\n                            <Notice\n                                text={t(\"get-free-keth-here\")}\n                                buttonText={t(\"get-keth\")}\n                                onPressButton={onGetKeth}\n                                color={\"orange\"}\n                                style={{ marginTop: Spacing.small }}\n                            />\n                        )} */}\n                </>\n            ) : (\n                <SwapInfo state={state} disabled={disabled} />\n            )}\n            {/* </ImageBackground> */}\n        </InfoBox >\n\n    );\n};\n\nconst WrapInfo = ({ state }: { state: SwapState }) => {\n    const disabled = isEmptyValue(state.fromAmount);\n    return (\n        <InfoBox>\n            <Text style={{ fontSize: 28, marginBottom: Spacing.normal }} disabled={disabled}>\n                {disabled ? \"---\" : state.fromAmount + \" \" + state.toSymbol}\n            </Text>\n            <SwapControls state={state} />\n        </InfoBox>\n    );\n};\n\nconst SwapInfo = ({ state, disabled }: { state: SwapState; disabled: boolean }) => {\n    const t = useTranslation();\n    const amount = state.trade?.outputAmount?.toFixed();\n    const price = state.trade?.executionPrice?.toFixed();\n    const impact = state.trade?.priceImpact?.toFixed(2);\n    return (\n        <View>\n            <AmountMeta amount={amount} suffix={state.toSymbol} disabled={disabled} />\n            <Meta\n                label={t(\"price\")}\n                text={price}\n                suffix={state.toSymbol + \"  = 1 \" + state.fromSymbol}\n                disabled={disabled}\n            />\n            <Meta label={t(\"price-impact\")} text={impact} suffix={\"%\"} disabled={disabled} />\n            <Meta label={t(\"fee-amount\")} text={state.swapFee} suffix={state.fromSymbol} disabled={disabled} />\n            <SwapControls state={state} />\n        </View>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst SwapControls = ({ state }: { state: SwapState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    useAsyncEffect(() => setError({}), [state.fromSymbol, state.toSymbol, state.fromAmount]);\n    const approveRequired = !isNativeToken(state.fromToken) && !state.fromTokenAllowed;\n    return (\n        <View style={{ marginTop: Spacing.normal }}>\n            {!state.fromToken ||\n                !state.toToken ||\n                isEmptyValue(state.fromAmount) ||\n                (!state.loading && !state.trade) ? (\n                <SwapButton state={state} onError={setError} disabled={true} />\n            ) : parseBalance(state.fromAmount, state.fromToken.decimals).gt(state.fromToken.balance) ? (\n                <InsufficientBalanceButton symbol={state.fromSymbol} />\n            ) : isWrappedNativeToken(state.fromToken) && isNativeToken(state.toToken) ? (\n                <UnwrapButton state={state} onError={setError} />\n            ) : isNativeToken(state.fromToken) && isWrappedNativeToken(state.toToken) ? (\n                <WrapButton state={state} onError={setError} />\n            ) : state.unsupported ? (\n                <UnsupportedButton state={state} />\n            ) : state.loading || !state.trade ? (\n                <FetchingButton />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={state.fromToken}\n                        spender={ROUTER}\n                        onSuccess={() => state.setFromTokenAllowed(true)}\n                        onError={setError}\n                        hidden={!approveRequired}\n                    />\n                    <SwapButton state={state} onError={setError} disabled={approveRequired} />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </View>\n    );\n};\n\nconst SwapButton = ({ state, onError, disabled }: { state: SwapState; onError: (e) => void; disabled: boolean }) => {\n    const t = useTranslation();\n    const onPress = useCallback(() => {\n        onError({});\n        state.onSwap().catch(onError);\n    }, [state.onSwap, onError]);\n    return (\n        <Button\n            title={t(\"swap-\", {\n                symbol: state.fromSymbol && state.toSymbol ? \" \" + state.fromSymbol + \"-\" + state.toSymbol : \"\"\n            })}\n            style={{ borderRadius: 15 }}\n            disabled={disabled}\n            loading={state.swapping}\n            onPress={onPress}\n        />\n    );\n};\n\nconst WrapButton = ({ state, onError }: { state: SwapState; onError: (e) => void }) => {\n    const t = useTranslation();\n    const onPress = useCallback(async () => {\n        onError({});\n        state.onWrap().catch(onError);\n    }, [state.onSwap, onError]);\n    return <Button title={t(\"wrap\")} loading={state.wrapping} onPress={onPress} style={{ borderRadius: 15 }} />;\n};\n\nconst UnwrapButton = ({ state, onError }: { state: SwapState; onError: (e) => void }) => {\n    const t = useTranslation();\n    const onPress = useCallback(async () => {\n        onError({});\n        state.onUnwrap().catch(onError);\n    }, []);\n    return <Button title={t(\"unwrap\")} loading={state.unwrapping} onPress={onPress} />;\n};\n\nconst LimitOrderInfo = ({ state }: { state: SwapState }) => {\n    const t = useTranslation();\n    const d = !state.trade?.executionPrice;\n    return (\n        <View>\n            <Text\n                disabled={isEmptyValue(state.limitOrderReturn)}\n                fontWeight={\"bold\"}\n                style={{ fontSize: 24, marginBottom: Spacing.normal }}>\n                {isEmptyValue(state.limitOrderReturn) ? \"---\" : state.limitOrderReturn + \" \" + state.toSymbol}\n            </Text>\n            <Meta\n                label={t(\"market-price\")}\n                text={state.trade?.executionPrice?.toFixed(8) || undefined}\n                suffix={state.toSymbol + \" / \" + state.fromSymbol}\n                disabled={d}\n            />\n            {/* <Meta label={t(\"relayer-fee-amount\")} text={state.limitOrderFee} suffix={state.fromSymbol} disabled={d} /> */}\n            <Meta label={t(\"swap-fee-amount\")} text={state.limitOrderSwapFee} suffix={state.fromSymbol} disabled={d} />\n            {/* <Meta label={t(\"expiration\")} text={t(\"24-hours-from-now\")} disabled={d} /> */}\n            <LimitOrderControls state={state} />\n        </View>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst LimitOrderControls = ({ state }: { state: SwapState }) => {\n    const { address, chainId } = useContext(EthersContext);\n    const [error, setError] = useState<MetamaskError>({});\n    const [allowed, setAllowed] = useState<boolean>();\n    useAsyncEffect(() => setError({}), [state.fromSymbol, state.toSymbol, state.fromAmount]);\n    useDelayedEffect(\n        async () => {\n            if (state.fromToken && !isEmptyValue(state.fromAmount)) {\n                const fromAmount = parseBalance(state.fromAmount, state.fromToken.decimals);\n                const erc20 = getContract(\"ERC20\", state.fromToken.address, TOMOCHAIN_MAINET_PROVIDER);\n                const allowance = await erc20.allowance(address, SETTLEMENT);\n                setAllowed(ethers.BigNumber.from(allowance).gte(fromAmount));\n            }\n        },\n        500,\n        [state.fromToken, state.fromAmount]\n    );\n    const disabled =\n        state.orderType === \"market\" ||\n        state.toSymbol === \"\" ||\n        !state.fromToken ||\n        !state.toToken ||\n        isEmptyValue(state.fromAmount) ||\n        !state.trade ||\n        isEmptyValue(state.limitOrderPrice);\n    return (\n        <View style={{ marginTop: Spacing.normal, borderRadius: 15 }}>\n            {disabled ? (\n                <PlaceOrderButton state={state} onError={setError} disabled={true} />\n            ) : parseBalance(state.fromAmount, state.fromToken!.decimals).gt(state.fromToken!.balance) ? (\n                <InsufficientBalanceButton symbol={state.fromSymbol} />\n            ) : !Fraction.parse(state.limitOrderPrice).gt(\n                Fraction.parse(state.trade!.executionPrice.toFixed(state.toToken!.decimals))\n            ) ? (\n                <PriceTooLowButton />\n            ) : state.unsupported ? (\n                <UnsupportedButton state={state} />\n            ) : state.loading || !state.trade ? (\n                <FetchingButton />\n            ) : (\n                <>\n                    {chainId === 88 ? (\n                        <ApproveButton\n                            token={state.fromToken!}\n                            spender={SETTLEMENT}\n                            onSuccess={() => setAllowed(true)}\n                            onError={setError}\n                            hidden={allowed}\n                        />\n                    ) : !allowed ? (\n                        <ChangeNetwork />\n                    ) : (\n                        <View />\n                    )}\n                    <PlaceOrderButton state={state} onError={setError} disabled={!allowed} />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </View>\n    );\n};\n\nconst PriceTooLowButton = () => {\n    const t = useTranslation();\n    return <Button title={t(\"set-price-greater-than-market\")} disabled={true} style={{ borderRadius: 15 }} />;\n};\n\nconst PlaceOrderButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: SwapState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const { chainId } = useContext(EthersContext);\n    const t = useTranslation();\n    const goToLimitOrders = useLinker(\"/my-orders\", \"LimitOrders\");\n    // const goToLimitOrders = () => window.location.reload(); \n    const onPress = useCallback(async () => {\n        onError({});\n        try {\n            await state.onCreateOrder();\n            goToLimitOrders();\n        } catch (e) {\n            onError(e);\n        }\n    }, [state.onCreateOrder, goToLimitOrders, onError]);\n    if (!disabled && (chainId !== 88)) return <ChangeNetwork chainId={88} />;\n    return (\n        <Button title={t(\"place-order\")} disabled={disabled} loading={state.creatingOrder} onPress={onPress} style={{ borderRadius: 15 }} />\n    );\n};\n\nexport default SwapScreen;\n"],"sourceRoot":""}